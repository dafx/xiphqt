#!/usr/bin/perl

use Tk;
use Tk qw(exit); 
use IPC::Open2;

$0="moaning-goat-meter"; # OK, this is evil.

$moddir="/home/xiphmont/SnotfishCVS/mgm/modules";
$libdir="/home/xiphmont/SnotfishCVS/mgm/lib";
$fontfile="$libdir/helvetica24.bdf";

require "$libdir/widget";

$|=1;
&doit(@ARGV);

&{$modules{"hostlogo"}->{"mgm_module_construct"}}($modules{"hostlogo"},$reqx,$reqy)->
    place(-x=>0,-y=>0,-anchor=>'nw');

Tk::MainLoop();

# toplevel setup

sub doit{
    # load the modules 

    $toplevel=new MainWindow();
    $Xname=$toplevel->Class;

    $toplevel->optionAdd("$Xname*background",  '#202020',20);
    $toplevel->optionAdd("$Xname*foreground",  '#a0a0a0',20);

    $toplevel->optionAdd("$Xname.stack",       'horizontal',20);
    $toplevel->optionAdd("$Xname.bars",        'vertical',20);
    $toplevel->optionAdd("$Xname.pad",         '1',20);
    $toplevel->optionAdd("$Xname*font",    
			 '-misc-fixed-*-*-*-*-8-*-*-*-*-*-*-*',20);

    $toplevel->optionAdd("$Xname*active",           'true',20);
    $toplevel->optionAdd("$Xname*scale",            'true',20);
    $toplevel->optionAdd("$Xname*scalecolor",       'yellow',20);
    $toplevel->optionAdd("$Xname*refresh",          '1000',20);

    $toplevel->optionAdd("$Xname*bar*dimbackground",       '#313656',21);
    $toplevel->optionAdd("$Xname*bar*litbackground",       '#74ade7',21);
    $toplevel->optionAdd("$Xname*bar*dimrelief",           'flat',21);
    $toplevel->optionAdd("$Xname*bar*litrelief",           'raised',21);

    $toplevel->optionAdd("$Xname*bar*label",            "fill in",21);
    $toplevel->optionAdd("$Xname*bar*ratio",            '1.5',21);


    # suck in command line resources
    while(my $arg=shift){
	$arg=~s{-(\S*)$}{$1};

	if($arg){
	    $val=shift;
	    $toplevel->optionAdd("$Xname*$arg",  "$val",80);
	}
    }
    
    $orient=$toplevel->optionGet("bars","Bars");
    $stack=$toplevel->optionGet("stack","Stack");
    $background=$toplevel->optionGet("background","Background");
    $foreground=$toplevel->optionGet("foreground","Foreground");

    $toplevel->optionAdd("$Xname*bar*dimforeground",  "$background",20);
    $toplevel->optionAdd("$Xname*bar*litforeground", "$background",20);


	
    $toplevel->configure('-background'=>"$background",'-foreground'
			 =>"$foreground");
	
    &LoadModules($moddir);

    # set up desired/min geometry, add a default geometry setting
	
    ($minx,$miny,$reqx,$reqy)=&geometries;
    $toplevel->optionAdd("$Xname.geometry",    $reqx.'x'.$reqy,20);
	
    my $geometry=$toplevel->optionGet("geometry","Geometry");
    $toplevel->geometry($geometry);


    $toplevel->resizable(TRUE,TRUE);
}

# load the modules

sub LoadModules{
    my($prefix)=@_;
    
    $prefix=~s{/\s*$}{}; # strip trailing slash
    $platform=`uname`;
    chop($platform);       

    # get the filenames in $prefix/<platform>
    my $searchdir="$prefix/$platform";
    if(opendir(D,$searchdir)){

        my$file;
        while(defined($file=readdir(D))){
            if(substr($file,0,1) ne '.'){
                print "Loading plugin $file\n";
                &LoadModule($searchdir,$file);
            }
        }
        closedir(D);
        
    }else{
        print STDERR "Unable to open plugin directory $searchdir: $!\n";
    }
}

sub LoadModule{
    my($path,$filename)=@_;

    my $moduleref= eval {do "$path/$filename";};
    
    if(defined($moduleref)){
	
	# The hash returned is just a string/function bundle; it contains the 
	# following keys:
	#    mgm_module_name         => string containing module name
	#    mgm_module_construct    => build the bar
	
	# Be certain we've not already loaded this plugin.

	if(!defined($name=$moduleref->{$test="mgm_module_name"})){
	    print STDERR 
		"Module plugin $filename doesn't define $test.\n";
	    return 0;
	}

	$name=$moduleref->{"mgm_module_name"};
	
	if(defined($modules{$name})){
	    print STDERR
		"Module $name already loaded.\n";
	    return(0);
	}
	
	if(!defined($moduleref->{$test="mgm_module_minx"})){
	    print STDERR 
		"Module plugin $filename doesn't define $test.\n";
	    return 0;
	}
	if(!defined($moduleref->{$test="mgm_module_miny"})){
	    print STDERR 
		"Module plugin $filename doesn't define $test.\n";
	    return 0;
	}
	if(!defined($moduleref->{$test="mgm_module_reqx"})){
	    print STDERR 
		"Module plugin $filename doesn't define $test.\n";
	    return 0;
	}
	if(!defined($moduleref->{$test="mgm_module_reqy"})){
	    print STDERR 
		"Module plugin $filename doesn't define $test.\n";
	    return 0;
	}
	if(!defined($moduleref->{$test="mgm_module_demand"})){
	    print STDERR 
		"Module plugin $filename doesn't define $test.\n";
	    return 0;
	}
	if(!defined($moduleref->{$test="mgm_module_construct"})){
	    print STDERR 
		"Module plugin $filename doesn't define $test.\n";
	    return 0;
	}
	$modules{$name}=$moduleref;
	
	
	# set default module options
	$toplevel->optionAdd("$Xname.$name.name",             "$name",19);
	$toplevel->optionAdd("$Xname.$name.active",           "true",19);
	1;
    }else{
	print "Error loading module $path/$filename: $!\n";
    }
}

sub geometries{
    @modlist=keys %modules;

    my$minx=0;
    my$miny=0;
    my$reqx=0;
    my$reqy=0;

    while(my$key=pop(@modlist)){

	my $mod=$modules{$key};
	my $name=$mod->{"mgm_module_name"};
	my $Name=ucfirst $name;
	my $active=$toplevel->optionGet("active","$Name.Active");

	print "$name=$active\n";
	if($active eq 'true'){
	    if($stack eq 'vertical'){
		$minx=$mod->{"mgm_module_minx"}if
		    ($minx<$mod->{"mgm_module_minx"});
		$reqx=$mod->{"mgm_module_reqx"}if
		    ($reqx<$mod->{"mgm_module_reqx"});
		$miny+=$mod->{"mgm_module_miny"};
		$reqy+=$mod->{"mgm_module_reqy"};
	    }else{
		$miny=$mod->{"mgm_module_miny"}if
		    ($miny<$mod->{"mgm_module_miny"});
		$reqy=$mod->{"mgm_module_reqy"}if
		    ($reqy<$mod->{"mgm_module_reqy"});
		$minx+=$mod->{"mgm_module_minx"};
		$reqx+=$mod->{"mgm_module_reqx"};
	    }
	}
    }

    ($minx,$miny,$reqx+2,$reqy+2);
}




