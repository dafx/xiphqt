# -*-Perl-*-
use Tk;
package MGMmodule::cpuusage;

sub module_construct{
    my($this,$toplevel,$width,$height)=@_;
    
    $graph=MGM::Graph->new($toplevel,num=>$numcpus,fixed=>'1',
			   width=>$width,height=>$height,prompt=>"%",
			   rangesetting=>'100',rangecurrent=>'100',
			   name=>$this->module_name); # don't forget name!!

    $widget=$graph->{"widget"};
    $this->{"graph"}=$graph;   # for local use
    $this->{"widget"}=$widget; # widget is required by mgm
    $widget;
}

my@load;
my@prevload;

sub module_update{ 
# in late 2.1+ kernels, each CPU has an entry in /proc/stat along with
# a common entry.  Earlier, only the common entry.

    my@load;
    my@total;

    die "Couldn't open /proc/stat\n" unless open(PROC,"</proc/stat");
    while(<PROC>){
	if(m/^cpu(\d*)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)/){
	    if($1){
		# per-cpu entry
		$load[$1+1]=$2+$3+$4;
		$total[$1+1]=$2+$3+$4+$5;
	    }else{
		# the common entry 
		$load[0]=$2+$3+$4;
		$total[0]=$2+$3+$4+$5;
	    }
	}
    }
    close PROC;    

    if(defined(@prevload)){
	my@vals;
	for(my$i=0;$i<$numcpus;$i++){
	    my$use=0;
	    if(defined($load[$i+1])){
		$use=$i+1;
	    }
	    my$tot=$total[$use]-$prevtotal[$use];
	    if($tot>0){
		$vals[$i]=100*($load[$use]-$prevload[$use])/$tot;
		$vals[$i]=100 if $vals[$i]>100;
	    }else{
		$vals[$i]=0;
	    }
	}
	$graph->set(@vals);
    }

    @prevload=@load;
    @prevtotal=@total;

}

sub module_init{
    my($mod,$toplevel,$xpath)=@_;

    # how many CPUs? Get this from /proc/cpuinfo, not /proc/stat    
    $numcpus=0;
    die "Couldn't open /proc/cpuinfo\n" unless open(PROC,"</proc/cpuinfo");
    while(<PROC>){
	if(m/processor\s*:\s*(\d*)/){
	    $numcpus=$1+1 if ($numcpus<$1+1);
	}
    }
    close PROC;
    
    ($minx,$miny)=MGM::Graph::calcxysize($mod,100,'%',$numcpus);

    for(my$i=0;$i<$numcpus;$i++){
	$toplevel->optionAdd("$xpath.bar.$i.label", "cpu $i",22);
    }
    $toplevel->optionAdd("$xpath.refresh",  250,21);      
    $toplevel->optionAdd("$xpath.minx",     $minx,21);      
    $toplevel->optionAdd("$xpath.miny",     $miny,21);      
    $toplevel->optionAdd("$xpath.widdemand",100*$numcpus,21);
    $toplevel->optionAdd("$xpath.lendemand",100,21);      
    1;
}

sub module_name{
    "cpuusage";
}

bless {};
