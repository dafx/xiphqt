# -*-Perl-*-

# this module doesn't follow the standard widget hooks.  It shows a
# few things that must be handled explicitly when one isn't mostly
# just calling MGM::Graph->new()

# instances allowed: multiple

use Tk;
package MGMmodule::hostlogo;

# called once to initialize the module.  The xpath here is a Class.
sub module_init{
    my$this=shift;
    my$toplevel=$this->{"toplevel"};
    my$xclass=$this->{"xclass"};

    my$hostname=`hostname`;
    chop$hostname;
    $hostname=~s{^([^\.]+).*}{$1};
    $this->{"hostname"}=$hostname;
    $toplevel->optionAdd("$xclass.order",               0,20);
    $this;
}

# called to build an instance.  The xpath here is a name path.
sub module_instance{
    my$this=shift;
    my$widget=$this->{"widget"};
    my$xpath=$this->{"xpath"};

    $widget->optionAdd("$xpath.scalewidadj", 5,21);
    $widget->optionAdd("$xpath.scalelenadj", 10,21); 
    $widget->optionAdd("$xpath*font",             
			 "-*-helvetica-*-r-*-*-10-*-*-*-*-*-*-*",20);
    $widget->optionAdd("$xpath*scalerefresh",        80,20);

    $widget->optionAdd("$xpath.scalejustify", 0,20);      

    # use our font and find the labelsize...
    my$testlabel=$this->{"widget"}->Label(-text=>$this->{"hostname"},
					 -borderwidth=>0,
					 -padx=>1,-pady=>1);
    
    my$textheight=$this->{"textheight"}=$testlabel->reqheight;
    my$textwidth=$this->{"textwidth"}=$testlabel->reqwidth;
    $testlabel->destroy;

    # load the logo in the instance init in case the user has selected
    # something different per instance

    # not completely implemented
    my$logofile=$widget->optionGet("logopixmap","");
    $logofile="$main::libdir/fishframe.xpm" if(!defined($logofile));
    my$logo=$this->{"logo"}=$widget->Pixmap(-file => $logofile);
    my$logoframes=$this->{"logoframes"}=12;
    my$logowidth=$this->{"logowidth"}=$logo->width/12;
    my$logoheight=$this->{"logoheight"}=$logo->height;
    
    my$minx=($logowidth>$textwidth?$logowidth:$textwidth);
    my$miny=$logoheight+$textheight;
    $widget->optionAdd("$xpath.minx", $minx,21);      
    $widget->optionAdd("$xpath.miny", $miny,21);      

    $this;
}

sub module_run{
    my$this=shift;

    my$width=$this->{"width"};
    my$height=$this->{"height"};
    my$toplevel=$this->{"toplevel"};

    my$logowidth=$this->{"logowidth"};
    my$textwidth=$this->{"textwidth"};
    my$logoheight=$this->{"logoheight"};
    my$textheight=$this->{"textheight"};
    my$logopad=($width-$logowidth)/2;
    my$textpad=($width-$textwidth)/2;
    my$vpad=($height-$logoheight-$textheight)/2;

    my$widget=$toplevel->Frame(-class=>$this->{"name"},
			       Name=>$this->{"sequence"},
			       borderwidth=>0,
			       highlightthickness=>0,
			       width=>$width,height=>$height);
    $this->{"logowidget"}=$widget->Canvas(borderwidth=>0,
					  highlightthickness=>0,
					  width=>$this->{"logowidth"},
					  height=>$this->{"logoheight"})->
					      place('-x'=>$logopad,
						    '-y'=>$vpad,-anchor=>'nw');
    $this->{"logowidget"}->createImage(0,0,-image=>$this->{"logo"},
				       -anchor=>'ne',-tags=>["logo"]);
    
    $widget->Label(-text=>$this->{"hostname"},
		   -borderwidth=>0,
		   -padx=>1,-pady=>1)->
		       place('-x'=>$textpad,'-y'=>$vpad+$this->{"logoheight"},
			     -anchor=>'nw');
    $this->{"counter"}=0;
    $this->{"widget"}=$widget;
}

sub module_update{
    my($this)=@_;

    my$counter=$this->{"counter"}+1;
    my$logowidth=$this->{"logowidth"};
    my$logoframes=$this->{"logoframes"};
    if($counter>=$logoframes){$counter=0;}
    my$math=$logowidth*$logoframes-$counter*$logowidth;
    $this->{"logowidget"}->coords('logo',$math,0);
    $this->{"counter"}=$counter;
}

bless {};
