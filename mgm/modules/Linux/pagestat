# -*-Perl-*-

# instances allowed: one 

# (single instance modules would be silly to use more than one of
# anyway, so we use package local storage.  This is faster and places
# less artificial load on the machine than doing everything through
# the object hash)

use Tk;
package MGMmodule::pagestat;
use vars qw($xpath $pagei $pageo $previ $prevo $widget $graph $lastmod);

# class init
sub module_init{
    my$this=shift;
    my$toplevel=$this->{"toplevel"};
    my$xclass=$this->{"xclass"};

    # is the helper up and running?
    if(!defined($MGMmodule::helperST::proc{"swap"})){
	$toplevel->optionAdd("$xclass.active",'false',21);   
    } 
    $toplevel->optionAdd("$xclass.order",1,21);   
    $this;
}

# instance init
sub module_instance{
    my$this=shift;
    my$toplevel=$this->{"toplevel"};
    return undef if(defined($xpath));
    $xpath=$this->{"xpath"};

    # modify defaults
    $toplevel->optionAdd("$xpath.bar.0.label", "page in",21);
    $toplevel->optionAdd("$xpath.bar.1.label", "page out",21);

    $toplevel->optionAdd("$xpath.bar.0.litbackground", 
			 '#e7ad74',21);
    $toplevel->optionAdd("$xpath.bar.1.litbackground", 
			 '#ade774',21);

    $toplevel->optionAdd("$xpath.scalewidadj", 160,21);  # narrower
    $toplevel->optionAdd("$xpath.scalerefresh",500,21); # about 1m
    $toplevel->optionAdd("$xpath.scalereturn", 120,21); # about 1m
    
    # this relies on the above defaults

    my($minx,$miny)=MGM::Graph::calcxysize($this,1024*1024*512,
					   ' pages/s',2);
    
    $toplevel->optionAdd("$xpath.minx",        $minx,21);      
    $toplevel->optionAdd("$xpath.miny",        $miny,21);      
    $this;
}

# instance widget build
sub module_run{
    my$this=shift;
    
    $graph=MGM::Graph->new($this,num=>2,
			   prompt=>' pages/s',
			   minscale=>128);

    $lastmod=-1;
    $widget=$graph->{"widget"};        # must return the widget
}

sub read_proc{
    # now uses the 00helper to save on opens 
    ($pagei,$pageo)=split ' ',$MGMmodule::helperST::proc{"page"};
}

sub module_update{ 
    my$this=shift;
    
    # don't update unless the helper has
    if($lastmod!=$MGMmodule::helperST::lastmod){
	my$time=$MGMmodule::helperST::lastmod;

	$this->read_proc;
	if(defined($previ)){
	    my$r=($pagei-$previ)/($time-$lastmod)*100;
	    my$w=($pageo-$prevo)/($time-$lastmod)*100;
	    
	    # don't be clever and only call set if values change; set must
	    # be called each refresh period or the graph will get
	    # confused.
	    
	    $graph->set($r,$w);
	}
	
	$previ=$pagei;
	$prevo=$pageo;
	$lastmod=$time;
    }
}

bless {};

