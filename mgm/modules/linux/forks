# -*-Perl-*-

# instances allowed: one 

# (single instance modules would be silly to use more than one of
# anyway, so we use package local storage.  This is faster and places
# less artificial load on the machine than doing everything through
# the object hash)

package MGMmodule::forks;
use vars qw($xpath $forks $prev $widget $graph $lastmod);

# class init
sub module_init{
    my$this=shift;
    my$toplevel=$this->{"toplevel"};
    my$xclass=$this->{"xclass"};

    # is the helper up and running?
    if(!defined($MGMmodule::helperST::proc{"processes"})){
	$toplevel->optionAdd("$xclass.active",'false',21);   
    } 
    $toplevel->optionAdd("$xclass.order",4,21);   
    $this;
}

# instance init
sub module_instance{
    my$this=shift;
    my$toplevel=$this->{"toplevel"};
    return undef if(defined($xpath));
    $xpath=$this->{"xpath"};
    
    # modify defaults
    $toplevel->optionAdd("$xpath.bar.0.label", "forks",21);
    $toplevel->optionAdd("$xpath.scalereturn", 100,21);
    $toplevel->optionAdd("$xpath.scalewidadj", 80,21);  # narrower
    $toplevel->optionAdd("$xpath.scalelenadj", 60,21);  # shorter
    
    # this relies on the above defaults

    my($minx,$miny)=MGM::Graph::calcxysize($this,1024*1024*512,
					   '/s',1);
    
    $toplevel->optionAdd("$xpath.minx",        $minx,21);      
    $toplevel->optionAdd("$xpath.miny",        $miny,21);      
    $this;
}

# instance widget build
sub module_run{
    my$this=shift;
    
    $graph=MGM::Graph->new($this,num=>1,
			   prompt=>'/s',
			   minscale=>4);
    
    $lastmod=-1;
    $widget=$graph->{"widget"};        # must return the widget
}

sub read_proc{
    # now uses the 00helper to save on opens 
    ($forks)=split ' ',$MGMmodule::helperST::proc{"processes"};
}

sub module_update{ 
    my$this=shift;
    
    # don't update unless the helper has
    if($lastmod!=$MGMmodule::helperST::lastmod){
	my$time=$MGMmodule::helperST::lastmod;
	
	$this->read_proc;
	if(defined($prev)){
	    my$f=($forks-$prev)/($time-$lastmod)*100;
	    
	    # don't be clever and only call set if values change; set must
	    # be called each refresh period or the graph will get
	    # confused.
	    
	    $graph->set($f);
	}
	
	$prev=$forks;
	$lastmod=$time;
    }
}

sub destroy{
    undef $xpath;
}

bless {};

