# -*-Perl-*-
use Tk;
use Tk qw(exit); 
use IPC::Open2;

# single bar graph pseudo-widget, built out of Tk canvases.

package MGM::Text;

# set up cropping limits

my$data=qx{pbmtext -font $main::fontfile "_A|Wpqf_"};
$test=&filter($data,"pnmfile");
$test=~m/(\d*)\s*by\s*(\d*)/;
my$width=$1;
my$height=$2;

my$test=&filter($data,"pnmcrop -top 2>/dev/null| pnmfile");
$test=~m/(\d*)\s*by\s*(\d*)/;
$topcrop=$height-$2-3;

my$test=&filter($data,"pnmcrop -bottom 2>/dev/null| pnmfile");
$test=~m/(\d*)\s*by\s*(\d*)/;
$bottomcrop=$height-$2-1;

my$test=&filter($data,"pnmcrop -left 2>/dev/null| pnmfile");
$test=~m/(\d*)\s*by\s*(\d*)/;
$leftcrop=$width-$1-1;

my$test=&filter($data,"pnmcrop -right 2>/dev/null| pnmfile");
$test=~m/(\d*)\s*by\s*(\d*)/;
$rightcrop=$width-$1-1;

sub filter{
    my($data,$commandline)=@_;

    die unless my$pid=IPC::Open2::open2(OUT,IN,$commandline);
    print IN $data;
	
    my $out;
    while(<OUT>){
	$out=$out.$_;
    }
    close IN;
    close OUT;
    waitpid($pid,0);
    $out;
}

sub maketext{
    my($text)=@_;
    
    my$data=qx{pbmtext -font $main::fontfile \"$text\"};

    # get width/height for cropping that does not vary the height

    $test=&filter($data,"pnmfile");
    $test=~m/(\d*)\s*by\s*(\d*)/;

    my$width=$1-($leftcrop+$rightcrop);
    my$height=$2-($topcrop+$bottomcrop);

    $rawimages->{$text}=&filter($data,"pnmcut $leftcrop $topcrop $width $height|pnmdepth 255 2>/dev/null");
}

sub scaletext{
    my($text,$stretch,$length,$height,$fore,$back,$dir,$nocache)=@_;
    
    if($height==0){
	undef;
    }else{
	
	&maketext($text) if(!defined($rawimages->{"$text"}));
	my$data=$rawimages->{"$text"};

	undef $rawimages->{"$text"} if(defined($nocache));
	
	$test=&filter($data,"pnmfile");
	
	$test=~m/(\d*)\s*by\s*(\d*)/;
	$length=$height/$2*$1 if ($length<=0);
	my$ratio=$stretch*$1/$2;
	
	my$command;
	# will it be too long to fit with a preserved aspect ratio?
	if($ratio > $length/$height){
	    # yes.  Squash it
	    $command="pgmtoppm \"$fore\"-\"$back\" ".
		"| pnmscale -xsize $length -ysize $height|";
	    
	}else{
	    # no.  preserve the ratio
	    my$yscale=$height/$2;
	    my$xscale=$yscale*$stretch;

	    $command="pgmtoppm \"$fore\"-\"$back\" | ".
		"pnmscale -yscale $yscale -xscale $xscale |";
	}

	$command=$command."pnmflip -r90 |" if($dir eq "vertical");
	$command=$command."ppmtoxpm 2>/dev/null";
		
	$data=&filter($data,$command);
	
	eval{$main::toplevel->Pixmap('-data'=>"$data")};
    }
}

package MGM::Bar;
@ISA=("Tk::Canvas");

sub drawborder{
    my($w,$width,$height,$relief,$dim,$lit)=@_;
    $z=0;

    if($relief eq 'sunken' ||
       $relief eq 'groove'){
	$w->createLine($width-1,0, 0,0, 0,$height-1, -capstyle=>projecting,
		       -fill=>$dim);
	$w->createLine($width-1,0, $width-1,$height-1, 0,$height-1, 
		       -capstyle=>projecting,-fill=>$lit);

	if($relief eq 'groove'){
	    $z=1;
	    $width-=1;
	    $height-=1;
	    $relief='raised';
	}
    }
    if($relief eq 'raised'){
	$w->createLine($width-1,$z, $width-1,$height-1, $z,$height-1, 
		       -capstyle=>projecting,-fill=>$dim);
	$w->createLine($width-1,$z, $z,$z, $z,$height-1, -capstyle=>projecting,
		       -fill=>$lit);
    }
}

sub reliefhack{
    my($bar,$y)=@_;
    my$widget=$bar->{"above"};
    my$width=$widget->cget("-width");
    my$relief=$bar->{"litrelief"};

    if($relief eq 'sunken'){
	$widget->createLine(0,$y-1,$width-1,$y-1,-capstyle=>projecting,
			 -fill=>$bar->{"litdim"},-tags=>['newrelief']);
    }

    if($relief eq 'raised'){
	$widget->createLine(0,$y-1,$width-1,$y-1,-capstyle=>projecting,
			 -fill=>$bar->{"litlit"},-tags=>['newrelief']);
    }

    if($relief eq 'groove'){
	$widget->createLine(0,$y-1,0,$y-2,$width-2,$y-2,-capstyle=>projecting,
			 -fill=>$bar->{"litdim"},-tags=>['newrelief']);
	$widget->createLine(1,$y-1,$width-1,$y-1,$width-1,$y-2,
			 -capstyle=>projecting,
			 -fill=>$bar->{"litlit"},-tags=>['newrelief']);
    }

    $widget->delete('relief');
    $widget->addtag('relief',withtag=>'newrelief');

}
    

sub new{
    my ($p,$width,$height,$num)=@_;

    $orient=$main::orient;

    # we're not as flat as we like to think 
    my $below=$p->Canvas(Name=>"$num");

    my $pad=$below->optionGet("textpad","Textpad");
    my $relief=$below->optionGet('dimrelief','Dimelief');
    my $arelief=$below->optionGet('litrelief','Litrelief');
    my $afore=$below->optionGet('litforeground','Litforeground');
    my $aback=$below->optionGet('litbackground','Litbackground');
    my $fore=$below->optionGet('dimforeground','Dimforeground');
    my $back=$below->optionGet('dimbackground','Dimbackground');
    my $label=$below->optionGet('label','Label');
    my $ratio=$below->optionGet('ratio','Ratio');
    
    my$border=0;
    $border=2 if ($relief eq 'groove');
    $border=1 if ($relief eq 'sunken');
    $border=1 if ($relief eq 'raised');

    my$aborder=0;
    $aborder=2 if ($arelief eq 'groove');
    $aborder=1 if ($arelief eq 'sunken');
    $aborder=1 if ($arelief eq 'raised');

    bless $below,"MGM::Bar";

    my($r,$g,$b)=$below->rgb($back);
    $r/=256;
    $g/=256;
    $b/=256;
    my$lum=$r*.3+$g*.5+$b*.2;
    $below->{"dimdim"}=sprintf "#%02x%02x%02x", $r*.5,$g*.5,$b*.5;
    $below->{"dimlit"}=sprintf "#%02x%02x%02x", 
          &main::min($r+$lum*.7,255),&main::min($g+$lum*.7,255),
          &main::min($b+$lum*.7,255);
    my($r,$g,$b)=$below->rgb($aback);
    $r/=256;
    $g/=256;
    $b/=256;
    $below->{"litdim"}=sprintf "#%02x%02x%02x", $r*.5,$g*.5,$b*.5;
    $below->{"litlit"}=sprintf "#%02x%02x%02x", 
          &main::min($r+$lum*.7,255),&main::min($g+$lum*.7,255),
          &main::min($b+$lum*.7,255);

    if($orient eq 'vertical'){
	$unlittext=MGM::Text::scaletext($label,$ratio,$height-($pad*2),
					$width-($pad*2),$fore,$back,
					"vertical");
	$littext=MGM::Text::scaletext($label,$ratio,$height-($pad*2),
				      $width-($pad*2),$afore,$aback,
				      "vertical");


	$below->{"barlength"}=$height;
	$below->{"litrelief"}=$arelief;
	$below->configure(-borderwidth=>$aborder,
			  -background=>$aback,
			  highlightthickness=>0,
			  width=>($width-$aborder*2),
			  height=>($height-$aborder*2),
			  relief=>$arelief);

	
	my$above=$below->{'above'}=
	    $below->Canvas(-borderwidth=>0,
			   -background=>$back,
			   highlightthickness=>0,
			   width=>$width,
			   height=>$height,
			   relief=>'flat')->
			       place(-relx=>0,-rely=>0,
				     -anchor=>'nw', 
				     -bordermode=>outside);
    
	$below->createImage($pad,$height-$pad,-image=>$littext,-anchor=>'sw');
	$above->createImage($pad,$height-$pad,-image=>$unlittext,
			    -anchor=>'sw');
	&drawborder($above,$width,$height,$relief,
		    $below->{"dimdim"},$below->{"dimlit"});

    }else{
	
	$unlittext=MGM::Text::scaletext($label,$ratio,$width-($pad*2),
					$height-($pad*2),$fore,$back);
	$littext=MGM::Text::scaletext($label,$ratio,$width-($pad*2),
				      $height-($pad*2),$afore,$aback);

	$below->{"barlength"}=$width;
	$below->configure(-borderwidth=>0,
			  -background=>$back,
			  highlightthickness=>0,
			  width=>$width,
			  height=>$height-$border*2,
			  relief=>'flat');
	
	my$above=$below->{'above'}=
	    $below->Canvas(-borderwidth=>$aborder,
			   -background=>$aback,
			   highlightthickness=>0,
			   width=>($width-2*$aborder),
			   height=>($height-2*$aborder),
			   relief=>$arelief)->
			       place(-relx=>0,-rely=>1.0,
				     -anchor=>sw, 
				     -bordermode=>outside);
	
	$above->createImage($pad,$height-$pad,-image=>$littext,-anchor=>'sw');
	$below->createImage($pad,$height-$pad,-image=>$unlittext,
			    -anchor=>'sw');
	&drawborder($below,$width,$height,$relief,
		    $below->{"dimdim"},$below->{"dimlit"});
	
    }
    
    
    $below->{'setting'}=-1;
    $below;
}

sub set{
    my($bar,$per)=@_;

    $per=int($per);

    if($per != $bar->{'setting'}){
	my $orient=$main::orient;
	if($orient eq 'vertical'){
	    my $border=$bar->cget("-borderwidth");
	    my $l=$bar->{"barlength"};
	    &reliefhack($bar,$l-$per+$border);
	    $bar->{'above'}->configure('-height'=>($l-$per+$border));
	}else{
	    my $border=$bar->{'above'}->cget("-borderwidth");
	    $bar->{'above'}->configure('-width'=>($per-2*$border));
	}

	$bar->{'setting'}=$per;
    }
}

package MGM::Graph;
@ISA=("Tk::Canvas");

# all the labels are the same size/color, but we have to do this after the toplevel is created so we have the size/color resources

sub cacheem{
    my$size=$main::toplevel->optionGet("labelsize","");
    my$fg=$main::foreground;
    my$bg=$main::background;
    my$orient=$main::orient;
    while(my$num=shift){
	if(!defined($numbers{$num})){	
	    $numbers{$num}=
		MGM::Text::scaletext($num,1.2,-1,$size,$fg,$bg,$orient,1);
	}
    }
}

sub cacheinit{
    if(!defined($numbers)){
	&cacheem("1","2","4","8","16","32","64","128","256","512");
    }
}

sub cacheprompt{
    my$prompt=shift;
    
    if(!defined($prompts{"$prompt"})){
	my$size=$main::toplevel->optionGet("labelsize","");
	my$fg=$main::foreground;
	my$bg=$main::background;
	my$orient=$main::orient;
	
	$prompts{"$prompt"}=
	  MGM::Text::scaletext("$prompt",1.2,-1,$size,$fg,$bg,$orient,1);
	$prompts{"k$prompt"}=
	  MGM::Text::scaletext("k$prompt",1.2,-1,$size,$fg,$bg,$orient,1);
	$prompts{"M$prompt"}=
	    MGM::Text::scaletext("M$prompt",1.2,-1,$size,$fg,$bg,$orient,1);
	$prompts{"G$prompt"}=
	  MGM::Text::scaletext("G$prompt",1.2,-1,$size,$fg,$bg,$orient,1);
    }
}

sub promptsize{
    my($prompt,$setting)=@_;

    if($main::orient eq 'vertical'){
	($numbers{$setting}->width,
	 $numbers{$setting}->height+$prompts{"$prompt"}->height);
    }else{
	($numbers{$setting}->height,
	 $numbers{$setting}->width+$prompts{"$prompt"}->width);
    }
}

sub scalemod{
    my$scaleset=shift;
    my$multiplier;
    
    if($scaleset>512){
	$scaleset/=1024;
	$multiplier="k";
	if($scaleset>512){
	    $scaleset/=1024;
	    $multiplier="M";
	    if($scaleset>512){
		$scaleset/=1024;
		$multiplier="G";
	    }
	}
    }
    ($scaleset,$multiplier);
}

sub promptlabel{
    my($p,$scaleset,$prompt)=@_;
    my $orient=$main::orient;
    my $multiplier;

    ($scaleset,$multiplier)=&scalemod($scaleset);
    my$label;

    my($textw,$textl)=&promptsize("$mult$prompt",$scaleset);
    if($orient eq 'vertical'){
	$label=$p->{"widget"}->Canvas(Name=>scalerange,
				      -borderwidth=>0,
				      highlightthickness=>0,
				      width=>$textw,
				      height=>$textl,
				      relief=>'flat')->
					  place(-x=>0,-y=>2,-anchor=>'nw');
	$label->createImage(0,0,
			    -image=>$prompts{"$mult$prompt"},-anchor=>'nw');
	$label->createImage(0,$textl-1,
			    -image=>$numbers{"$scaleset"},-anchor=>'sw');
    }else{
	$label=$p->{"widget"}->Canvas(Name=>scalerange,
				      -borderwidth=>0,
				      highlightthickness=>0,
				      width=>$textl,
				      height=>$textw,
				      relief=>'flat')->
					  place(-relx=>1.0,
						-x=>-2,-y=>0,-anchor=>'ne');
	$label->createImage($textl-1,0,
			    -image=>$prompts{"$mult$prompt"},-anchor=>'ne');
	$label->createImage(0,0,
			    -image=>$numbers{"$scaleset"},-anchor=>'nw');
    }
    $label;
}

sub new{
    my$p=shift;

    my %graph = ( 'num' => '1',
		  'fixed' => '0',
		  'rangesetting'=> '1',
		  'rangecurrent'=> '1' );

    my $ret=\%graph;
    bless $ret, 'MGM::Graph';
    $graph{"parent"}=$p;

    $ret->configure(@_);
    $ret;
}

sub calcsize{
    my($this,$scaleset,$prompt,$num)=@_;
    
    my$barw=4*$num;
    my$barl=10;
    my$scalew=0;
    my$textl=0;
    my$textwl=0;

    if (&main::moption($this,"scale") eq 'true'){
	my($set,$mult)=&scalemod($scaleset);
	&cacheinit();
	&cacheprompt($prompt);
	&cacheem($set);

	($textw,$textl)=&promptsize("$mult$prompt",$set);
	$textw+=3;
	$textl+=10;
	$scalew=6;
    }

    $scalew=&main::max($scalew,$textw);
    $barl=&main::max($barl,$textl);

    ($barw+$scalew,$barl,$scalew);
}

sub calcxysize{
    my($w,$l)=&calcsize(@_);

    if($main::orient eq 'vertical'){
	($w,$l);
    }else{
	($l,$w);
    }
}
    
sub drawit{
    my$this=shift;
    
    undef $this->{"widget"};
    undef $this->{"numlabel"};

    for(my$i=0;$i<$this->{"num"};$i++){
	undef $this->{"bar$i"};
    }

    # a 'graph' consists of a scale, and <n> bars under central control

    my $name=$this->{"name"};
    my $num=$this->{"num"};
    my $prompt=$this->{"prompt"};
    my $rangesetting=$this->{"rangesetting"};
    my $fixed=$this->{"fixed"};

    my $height=$this->{"height"};
    my $width=$this->{"width"};

    my($dummy,$dummy,$scalew)=&calcsize($this,$rangesetting,$prompt,$num);
    $this->{"scalew"}=$scalew;

    my$widget=$this->{"widget"}=
	$this->{"parent"}->Canvas(Name=>$name,
				  -borderwidth=>0,
				  highlightthickness=>0,
				  width=>$width,
				  height=>$height,
				  relief=>'flat');
    
    $this->{"numlabel"}=$this->promptlabel($rangesetting,$prompt);
 
    my $orient=$main::orient;
    if($orient eq 'vertical'){
	$this->drawvscale if($scalew);

	$this->{"barlength"}=$height;
	my$barwidth=$width-$scalew;
	my$frame=$widget->Frame(Name=>'bar',
				-width=>$barwidth,
				-height=>$height,
				-borderwidth=>0)->
				    place(-x=>$scalew,
					  -y=>0,
					  -anchor=>'nw');
	
	$barwidth/=$num;
	$barwidth=int($barwidth);
	my$x=0;
	for(my$i=0;$i<$num;$i++){
	    $this->{"bar$i"}=$frame->
	      MGM::Bar::new($barwidth-1,
			    $height,
			    $i)->place(-x=>$x,-y=>0,
				       -anchor=>'nw');
	    $x+=$barwidth;
	}
    }else{
	$this->drawhscale if($scalew);

	$this->{"barlength"}=$width;
	my$barwidth=$height-$scalew;
	my$frame=$widget->Frame(Name=>'bar',
				-width=>$width,
				-height=>$barwidth,
				-borderwidth=>0)->
				    place(-y=>$scalew,
					  -x=>0,
					  -anchor=>'nw');
	
	$barwidth/=$num;
	$barwidth=int($barwidth);
	my$y=0;
	for(my$i=0;$i<$num;$i++){
	    $this->{"bar$i"}=$frame->
	      MGM::Bar::new($width,
			    $barwidth-1,
			    $i)->place(-x=>0,-y=>$y,
				       -anchor=>'nw');
	    $y+=$barwidth;
	}
    }
}

sub place{
    my$this=shift;
    $this->{"widget"}->place(@_);
    $this;
}

sub configure{
    my$this=shift;
    my ($arg,$val);
    while($arg=shift){
	$val=shift;   
        if(!defined($val)){last;}
	$this->{"$arg"}=$val;

	print "$arg $val\n";
    }

    # The only strategy, currently, is to redraw ;-) 

    $this->drawit();
}

sub drawvscale{
    my$this=shift;

    # length is in barlength
    # current scale setting in rangecurrent
    # scale 'goal' in rangesetting (may smooth-scroll)
    # current max meter setting in metermax
    # (other meter settings in meter0, meter1, meter2....)

    # build new scale 
    my$widget=$this->{"widget"};
    my$color=$widget->optionGet("scalecolor","Scalecolor");
    my$height=$this->{"height"};
    my$width=4;
    my$xo=$this->{"scalew"}-2;

    $widget->createLine($xo,0,$xo,$height-1,$xo-$width,$height-1,
			-tags=>['newscale'],-fill=>$color,
			-capstyle=>'projecting');

    # powers of two. tics no closer than every 4 pixels

    my$max=$height/$this->{"rangecurrent"}*$this->{"rangesetting"};
    if($this->{"rangecurrent"}==$this->{"rangesetting"}){
	$widget->createLine($xo,0,$xo-$width,0,
			    -tags=>['newscale'],-fill=>$color,
			    -capstyle=>'projecting');
    }

    my$step=1;
    for(my$div=2;;$div*=2){
	my$flag=0;
	last if($width<1);
	last if($max/$div<4);
	for(my$tic=1;;$tic+=$step){
	    my$y=$height-$max/$div*$tic;
	    if($y>=0){
		$widget->createLine($xo,$y,$xo-$width,$y,
				    -tags=>['newscale'],-fill=>$color,
				    -capstyle=>'projecting');
		$flag=1;
	    }else{
		last;
	    }
	}
	$width-- if ($flag);
	$step=2;
    }
    
    # replace old scale with new scale 
    
    $widget->delete('scale');
    $widget->addtag('scale',withtag=>'newscale');
}

sub drawhscale{
    my$this=shift;

    # length is in barlength
    # current scale setting in rangecurrent
    # scale 'goal' in rangesetting (may smooth-scroll)
    # current max meter setting in metermax
    # (other meter settings in meter0, meter1, meter2....)

    # build new scale 
    my$widget=$this->{"widget"};
    my$color=$widget->optionGet("scalecolor","Scalecolor");
    my$yo=$this->{"scalew"}-2;
    my$width=$this->{"width"};
    my$height=4;

    $widget->createLine(0,$yo-$height,0,$yo,$width-1,$yo,
			-tags=>['newscale'],-fill=>$color,
			-capstyle=>'projecting');
    
    # powers of two. tics no closer than every 4 pixels
    my$max=$width/$this->{"rangecurrent"}*$this->{"rangesetting"};
    if($this->{"rangecurrent"}==$this->{"rangesetting"}){
	$widget->createLine($width-1,$yo-$height,$width-1,$yo,
			    -tags=>['newscale'],-fill=>$color,
			    -capstyle=>'projecting');
    }
    
    my$step=1;
    for(my$div=2;;$div*=2){
	my$flag=0;
	last if($max/$div<4);
	last if($height<1);
	for(my$tic=1;;$tic+=$step){
	    my$x=$max/$div*$tic;
	    if($x<$width){
		$widget->createLine($x,$yo-$height,$x,$yo,
				    -tags=>['newscale'],-fill=>$color,
				    -capstyle=>'projecting');
		$flag=1;
	    }else{
		last;
	    }
	}
	$height-- if ($flag);
	$step=2;
    }

    # replace old scale with new scale 
    
    $widget->delete('scale');
    $widget->addtag('scale',withtag=>'newscale');
}

sub set{
    my$this=shift;

    my$num=$this->{"num"};
    my$metermax;
    my$length=$this->{"barlength"};
    my$widget=$this->{"widget"};
    my$scalep=0;
    my$scrollp=1;

    $scalep=1 if ($widget->optionGet("scale","Scale") eq 'true');
    $scroll=0 if ($widget->optionGet("scroll","Scroll") eq 'false');

    # length is in barlength
    # current scale setting in rangecurrent
    # scale 'goal' in rangesetting (may smooth-scroll)
    # current max meter setting in metermax
    # (other meter settings in meter0, meter1, meter2....)

    if(defined($metermax=shift)){
	$this->{"meter0"}=$metermax;
	for(my$i=1;$i<$num;$i++){
	    my$val=$this->{"meter$i"}=shift;
	    $metermax=$val if ($val>$metermax);
	}
	
	$this->{"metermax"}=$metermax;
    }else{
	# nope... probably just a scale update
	$metermax=$this->{"metermax"};
    }

    if(!$this->{"fixed"}){
	my$flag=0;
	while($metermax>$this->{"rangesetting"}){
	    $this->{"rangesetting"}*=2;
	    $this->{"rangediff"}=$this->{"rangesetting"}-$this->{"rangecurrent"};
	    $flag=1;
	}
	
	while($metermax*10<$this->{"rangesetting"}){
	    $this->{"rangesetting"}/=2;
	    $this->{"rangesetting"}=1,last if($this->{"rangesetting"}<1);
	    $this->{"rangediff"}=$this->{"rangesetting"}-$this->{"rangecurrent"};
	    $flag=1;
	}
	if($flag){
	    my$val=int($this->{'rangesetting'});
	    
	    $this->{"numlabel"}->destroy;
	    $this->{"numlabel"}=$this->promptlabel($val,$this->{'prompt'});
	}
    }

    if($this->{"rangecurrent"}!=$this->{"rangesetting"}){
	if(!$scalep || !$scrollp){
	    $this->{"rangecurrent"}=$this->{"rangesetting"};
	}else{
	    if(abs($this->{"rangecurrent"}/$this->{"rangesetting"}-1)<.02){
		$this->{"rangecurrent"}=$this->{"rangesetting"};
	    }else{
		$this->{"rangecurrent"}+=$this->{"rangediff"}*.05;
	    }
	}
	my $orient=$main::orient;
	if($orient eq 'vertical'){
	    $this->drawvscale;
	}else{
	    $this->drawhscale;
	}
    }

    for(my$i=0;$i<$num;$i++){
	my$val=$this->{"meter$i"}/$this->{"rangecurrent"}*$length;
	$this->{"bar$i"}->set($val);
    }
    
    if($this->{"rangecurrent"}!=$this->{"rangesetting"}){
	$this->{"anitimer"}->cancel if(defined($this->{"anitimer"}));
	$this->{"anitimer"}=$this->{"widget"}->after(20,sub{$this->set;});
    }
}

1;

