# -*-Perl-*-
use Tk;
use Tk qw(exit); 
use IPC::Open2;
require "$libdir/xpm";

# single bar graph pseudo-widget, built out of Tk canvases.

package MGM::Bar;
@ISA=("Tk::Canvas");

$font=MGM::Font::new(MGM::Xpm::read($main::fontfile));

sub drawborder{
    my($w,$width,$height,$relief,$dim,$lit)=@_;
    $z=0;

    if($relief eq 'sunken' ||
       $relief eq 'groove'){
	$w->createLine($width-1,0, 0,0, 0,$height-1, -capstyle=>'projecting',
		       -fill=>$dim);
	$w->createLine($width-1,0, $width-1,$height-1, 0,$height-1, 
		       -capstyle=>'projecting',-fill=>$lit);

	if($relief eq 'groove'){
	    $z=1;
	    $width-=1;
	    $height-=1;
	    $relief='raised';
	}
    }
    if($relief eq 'raised'){
	$w->createLine($width-1,$z, $width-1,$height-1, $z,$height-1, 
		       -capstyle=>'projecting',-fill=>$dim);
	$w->createLine($width-1,$z, $z,$z, $z,$height-1, 
		       -capstyle=>'projecting',-fill=>$lit);
    }
}

sub new{
    my ($p,$width,$height,$num)=@_;

    $orient=$main::orient;

    # we're not as flat as we like to think 
    my $below=$p->Canvas(Name=>"$num");
    my$above=$below->{"above"}=$below->Canvas()->place(-relx=>0,-rely=>0,
					      -anchor=>'nw', 
					      -bordermode=>'outside');
    bless $below;

    # we configure the color and label via a configurable X resource;
    # it's cleaner than setting up a system that alters a single X resource

    $below->{"aforeXr"}='litforeground';
    $below->{"abackXr"}='litbackground';
    $below->{"labelXr"}='label';

    $below->{"width"}=$width;
    $below->{"height"}=$height;
    $below->{"num"}=$num;

    $below->drawit;
    $below;
}

sub configure{
    my$this=shift;
    my ($arg,$val);
    while(defined($arg=shift)){
	$val=shift;   

        if(!defined($val)){last;}
	$this->{"$arg"}=$val;
    }

    $this->delete('xpmlabel');
    $this->{'above'}->delete('xpmlabel');

    $this->drawit;
}

sub drawit{
    my$below=shift;

    $orient=$main::orient;

    my$width=$below->{"width"};
    my$height=$below->{"height"};
    my$num=$below->{"num"};

    my $pad=$below->optionGet("textpad","");
    my $relief=$below->optionGet('dimrelief','');
    my $arelief=$below->optionGet('litrelief','');

    my $afore=$below->optionGet($below->{"aforeXr"},'');
    my $aback=$below->optionGet($below->{"abackXr"},'');
    my $label=$below->optionGet($below->{"labelXr"},'');

    my $fore=$below->optionGet('dimforeground','');
    my $back=$below->optionGet('dimbackground','');
    my $ratio=$below->optionGet('ratio','');
    
    my$border=0;
    $border=2 if ($relief eq 'groove');
    $border=1 if ($relief eq 'sunken');
    $border=1 if ($relief eq 'raised');

    my$aborder=0;
    $aborder=2 if ($arelief eq 'groove');
    $aborder=1 if ($arelief eq 'sunken');
    $aborder=1 if ($arelief eq 'raised');
    
    my($r,$g,$b)=$below->rgb($back);
    $r/=256;
    $g/=256;
    $b/=256;
    my$lum=$r*.3+$g*.5+$b*.2;
    $below->{"dimdim"}=sprintf "#%02x%02x%02x", $r*.5,$g*.5,$b*.5;
    $below->{"dimlit"}=sprintf "#%02x%02x%02x", 
          &main::min($r+$lum*.7,255),&main::min($g+$lum*.7,255),
          &main::min($b+$lum*.7,255);

    if($orient eq 'vertical'){
	my$text=$font->maketext($label,$width-($pad*2),$height-($pad*2),
			      $ratio,1,1);
	
	my$unlittext=$main::toplevel->Pixmap(-data=>$text->write($fore,$back,32));
	my$littext=$main::toplevel->Pixmap(-data=>$text->write($afore,$aback,32));

	$below->{"barlength"}=$height;
	$below->{"litrelief"}=$arelief;

	$below->SUPER::configure(-borderwidth=>$aborder,
			  -background=>$aback,
			  highlightthickness=>0,
			  width=>($width-$aborder*2),
			  height=>($height-$aborder*2),
			  relief=>$arelief);
	
	my$above=$below->{'above'};
	$above->SUPER::configure(-borderwidth=>0,
				 -background=>$back,
				 highlightthickness=>0,
				 width=>$width,
				 height=>$height,
				 relief=>'flat');

	$below->{"reliefhack"}->destroy if(defined($below->{"reliefhack"}));
	if($aborder){
	    $below->{"reliefhack"}=$above->
		Label(-borderwidth=>$aborder,
		      -background=>$aback,
		      highlightthickness=>0,
		      width=>($width-$aborder*2),
		      height=>4,
		      relief=>$arelief)->
			  place('-x'=>0,-rely=>1.0,'-y'=>-$aborder,
				-anchor=>'nw',-bordermode=>'outside');
	}
    


	$below->createImage($pad,$height-$pad,-image=>$littext,-anchor=>'sw',
			    -tags=>['xpmlabel']);
	$above->createImage($pad,$height-$pad,-image=>$unlittext,
			    -anchor=>'sw',-tags=>['xpmlabel']);
	&drawborder($above,$width,$height,$relief,
		    $below->{"dimdim"},$below->{"dimlit"});
	
    }else{
	my$text=$font->maketext($label,$height-($pad*2),$width-($pad*2),
			      $ratio,0,1);
	my$unlittext=$main::toplevel->Pixmap(-data=>$text->write($fore,$back,32));
	my$littext=$main::toplevel->Pixmap(-data=>$text->write($afore,$aback,32));

	$below->{"barlength"}=$width;
	$below->SUPER::configure(-borderwidth=>0,
				 -background=>$back,
				 highlightthickness=>0,
				 width=>$width,
				 height=>$height-$border*2,
				 relief=>'flat');
	
	my$above=$below->{'above'};
	$above->SUPER::configure(-borderwidth=>$aborder,
				 -background=>$aback,
				 highlightthickness=>0,
				 width=>($width-2*$aborder),
				 height=>($height-2*$aborder),
				 relief=>$arelief);
	
	$above->createImage($pad,$height-$pad,-image=>$littext,-anchor=>'sw',
			    -tags=>['xpmlabel']);
	$below->createImage($pad,$height-$pad,-image=>$unlittext,
			    -anchor=>'sw',-tags=>['xpmlabel']);
	&drawborder($below,$width,$height,$relief,
		    $below->{"dimdim"},$below->{"dimlit"});
	
    }
    
    $below->{'setting'}=-1;
    $below;
}

sub set{
    my($bar,$per)=@_;

    $per=int($per);

    if($per != $bar->{'setting'}){
	my $orient=$main::orient;
	if($orient eq 'vertical'){
	    my $border=$bar->cget("-borderwidth");
	    my $l=$bar->{"barlength"};
	    $bar->{'above'}->SUPER::configure('-height'=>($l-$per+$border));
	}else{
	    my $border=$bar->{'above'}->cget("-borderwidth");
	    $bar->{'above'}->SUPER::configure('-width'=>($per-2*$border));
	}

	$bar->{'setting'}=$per;
    }
}

package MGM::Graph;
@ISA=("Tk::Canvas");

# all the labels are the same size/color, but we have to do this after the toplevel is created so we have the size/color resources

my%numbers;

sub cacheem{
    my$size=$main::toplevel->optionGet("labelsize","");
    my$fg=$main::foreground;
    my$bg=$main::background;
    my$orient=$main::orient;
    while(my$num=shift){
	if(!defined($numbers{$num})){	
	    $numbers{$num}=$main::toplevel->
		Pixmap(-data=>$MGM::Bar::font->
		       maketext($num,$size,undef,1,
				$orient eq 'vertical'?1:undef)->
		       write($fg,$bg,32,32));
	}
    }
}

sub cacheinit{
    if(!defined($numbers)){
	&cacheem("1","2","4","8","16","32","64","128","256","512");
    }
}

sub cacheprompt{
    my$prompt=shift;
    
    if(!defined($prompts{"$prompt"})){
	my$size=$main::toplevel->optionGet("labelsize","");
	my$fg=$main::foreground;
	my$bg=$main::background;
	my$orient=$main::orient;
	
	$prompts{"$prompt"}=$main::toplevel->Pixmap(-data=>
	    $MGM::Bar::font->maketext("$prompt",$size,undef,1,
				      $orient eq 'vertical'?1:undef)->
					  write($fg,$bg,32,32));
	$prompts{"k$prompt"}=$main::toplevel->Pixmap(-data=>
	    $MGM::Bar::font->maketext("k$prompt",$size,undef,1,
				      $orient eq 'vertical'?1:undef)->
					  write($fg,$bg,32,32));
	$prompts{"M$prompt"}=$main::toplevel->Pixmap(-data=>
	    $MGM::Bar::font->maketext("M$prompt",$size,undef,1,
				      $orient eq 'vertical'?1:undef)->
					  write($fg,$bg,32,32));
	$prompts{"G$prompt"}=$main::toplevel->Pixmap(-data=>
	    $MGM::Bar::font->maketext("G$prompt",$size,undef,1,
				      $orient eq 'vertical'?1:undef)->
					  write($fg,$bg,32,32));
    }
}

sub promptsize{
    my($prompt,$setting)=@_;

    if($main::orient eq 'vertical'){
	($numbers{$setting}->width,
	 $numbers{$setting}->height+$prompts{"$prompt"}->height);
    }else{
	($numbers{$setting}->height,
	 $numbers{$setting}->width+$prompts{"$prompt"}->width);
    }
}

sub scalemod{
    my$scaleset=shift;
    my$multiplier='';
    
    if($scaleset>512){
	$scaleset/=1024;
	$multiplier="k";
	if($scaleset>512){
	    $scaleset/=1024;
	    $multiplier="M";
	    if($scaleset>512){
		$scaleset/=1024;
		$multiplier="G";
	    }
	}
    }
    ($scaleset,$multiplier);
}

sub promptlabel{
    my($p,$scaleset,$prompt)=@_;
    my $orient=$main::orient;
    my $mult;

    ($scaleset,$mult)=&scalemod($scaleset);
    my$label;

    my($textw,$textl)=&promptsize("$mult$prompt",$scaleset);

    if($orient eq 'vertical'){
	$label=$p->{"widget"}->Canvas(Name=>'scalerange',
				      -borderwidth=>0,
				      highlightthickness=>0,
				      width=>$textw,
				      height=>$textl,
				      relief=>'flat')->
					  place('-x'=>0,'-y'=>2,-anchor=>'nw');
	$label->createImage(0,0,
			    -image=>$prompts{"$mult$prompt"},-anchor=>'nw');
	$label->createImage(0,$prompts{"$mult$prompt"}->height,
			    -image=>$numbers{"$scaleset"},-anchor=>'nw');
    }else{
	$label=$p->{"widget"}->Canvas(Name=>'scalerange',
				      -borderwidth=>0,
				      highlightthickness=>0,
				      width=>$textl,
				      height=>$textw,
				      relief=>'flat')->
					  place(-relx=>1.0,
						'-x'=>-2,'-y'=>0,
						-anchor=>'ne');
	$label->createImage($numbers{"$scaleset"}->width,0,
			    -image=>$prompts{"$mult$prompt"},-anchor=>'nw');
	$label->createImage(0,0,
			    -image=>$numbers{"$scaleset"},-anchor=>'nw');
    }
    $label;
}

sub new{
    my$class=shift;
    my$p=shift;

    my %graph = ( 'width'=> $p->{"width"},
		  'height'=> $p->{"height"},
		  'name' => $p->{"name"},
		  'rangesetting'=>1,
		  'rangecurrent'=>1,
		  'minscale'=>1,
		  'num' => '1',
		  'fixed' => '0');

    my $ret=\%graph;
    bless $ret, 'MGM::Graph';
    $graph{"parent"}=$p->{"toplevel"};
    $graph{"scaletimer"}=0;
    $graph{"scalemax"}=0;

    $ret->_configure(@_);

    $widget=$ret->{"widget"}=
	$ret->{"parent"}->Canvas(-class=>$ret->{"name"},
				 Name=>$p->{"sequence"});

    $ret->drawit;
    $ret;
}

sub calcsize{
    my($this,$scaleset,$prompt,$num)=@_;
    
    my$barw=4*$num;
    my$barl=10;
    my$scalew=0;
    my$textl=0;
    my$textw=0;

    if (&main::moption($this,"scale") eq 'true'){
	my($set,$mult)=&scalemod($scaleset);
	&cacheinit();
	&cacheprompt($prompt);
	&cacheem($set);

	($textw,$textl)=&promptsize("$mult$prompt",$set);
	$textw+=3;
	$textl+=4;
	$scalew=6;
    }

    $scalew=&main::max($scalew,$textw);
    $barl=&main::max($barl,$textl);

    ($barw+$scalew,$barl,$scalew);
}

sub calcxysize{
    my($w,$l)=&calcsize(@_);

    if($main::orient eq 'vertical'){
	($w,$l);
    }else{
	($l,$w);
    }
}
    
sub drawit{
    my$this=shift;
    
    # a 'graph' consists of a scale, and <n> bars under central control

    my $name=$this->{"name"};
    my $num=$this->{"num"};
    my $prompt=$this->{"prompt"};
    my $fixed=$this->{"fixed"};

    my $height=$this->{"height"};
    my $width=$this->{"width"};
    my $widget=$this->{"widget"};

    $widget->configure(-borderwidth=>0,
		       highlightthickness=>0,
		       width=>$width,
		       height=>$height,
		       relief=>'flat');

    my $rangesetting=$this->{"rangesetting"};
    my($dummy,$dummy,$scalew)=&calcsize($this,$rangesetting,$prompt,$num);
    $this->{"scalew"}=$scalew;
    $this->{"numlabel"}=$this->promptlabel($rangesetting,$prompt);
 
    my $orient=$main::orient;
    if($orient eq 'vertical'){
	$this->drawvscale if($scalew);

	$this->{"barlength"}=$height;
	my$barwidth=$width-$scalew;
	my$frame=$this->{"barframe"}=
	    $widget->Frame(Name=>'bar',
			   -width=>$barwidth,
			   -height=>$height,
			   -borderwidth=>0)->
			       place('-x'=>$scalew,
				     '-y'=>0,
				     '-anchor'=>'nw');
	
	$barwidth/=$num;
	$barwidth=int($barwidth);
	my$x=0;
	for(my$i=0;$i<$num;$i++){
	    $this->{"bar$i"}=$frame->
	      MGM::Bar::new($barwidth-1,
			    $height,
			    $i)->place('-x'=>$x,'-y'=>0,
				       '-anchor'=>'nw');
	    $x+=$barwidth;
	}
    }else{
	$this->drawhscale if($scalew);

	$this->{"barlength"}=$width;
	my$barwidth=$height-$scalew;
	my$frame=$this->{"barframe"}=
	    $widget->Frame(Name=>'bar',
			   -width=>$width,
			   -height=>$barwidth,
			   -borderwidth=>0)->
			       place('-y'=>$scalew,
				     '-x'=>0,
				     -anchor=>'nw');
	
	$barwidth/=$num;
	$barwidth=int($barwidth);
	my$y=0;
	for(my$i=0;$i<$num;$i++){
	    $this->{"bar$i"}=$frame->
	      MGM::Bar::new($width,
			    $barwidth-1,
			    $i)->place('-x'=>0,'-y'=>$y,
				       -anchor=>'nw');
	    $y+=$barwidth;
	}
    }
}

sub place{
    my$this=shift;
    $this->{"widget"}->place(@_);
    $this;
}

sub _configure{
    my$this=shift;
    my ($arg,$val);
    while(defined($arg=shift)){
	$val=shift;   

        if(!defined($val)){last;}
	$this->{"$arg"}=$val;
    }

    # enforce power of two dynamic ranging
    $this->{"rangesetting"}=$this->{"minscale"} if($this->{"minscale"}>
						   $this->{"rangesetting"});
    $this->{"rangecurrent"}=$this->{"minscale"} if($this->{"minscale"}>
						   $this->{"rangecurrent"});
    if($this->{"fixed"}==0){
	my$i=1;
	while($i<$this->{"rangesetting"}){
	    $i*=2;
	}
	$this->{"rangesetting"}=$i;
    }
    $this->{"rangediff"}=$this->{"rangesetting"}-
	$this->{"rangecurrent"};
}

# we can't configure anything that requires size changes.
sub configure{
    my$this=shift;
    my%copy=%$this;
    
    $this->_configure(@_);

    if($copy{"rangesetting"} != $this->{"rangesetting"}){
	my$val=int($this->{'rangesetting'});
	
	$this->{"numlabel"}->destroy;
	$this->{"numlabel"}=$this->promptlabel($val,$this->{'prompt'});
	$this->{"rangediff"}=$this->{"rangesetting"}-
	    $this->{"rangecurrent"};
    }
}

# a way to configure individual bars
sub barconfigure{
    my$this=shift;
    my$bar=shift;
    $bar=$this->{"bar$bar"};
    $bar->configure(@_);
}

sub drawvscale{
    my$this=shift;

    # length is in barlength
    # current scale setting in rangecurrent
    # scale 'goal' in rangesetting (may smooth-scroll)
    # current max meter setting in metermax
    # (other meter settings in meter0, meter1, meter2....)

    # build new scale 
    my$widget=$this->{"widget"};
    my$color=$widget->optionGet("scalecolor","");
    my$height=$this->{"height"};
    my$width=4;
    my$xo=$this->{"scalew"}-2;

    $widget->createLine($xo,0,$xo,$height-1,$xo-$width,$height-1,
			-tags=>['newscale'],-fill=>$color,
			-capstyle=>'projecting');

    # powers of two. tics no closer than every 4 pixels

    my$max=$height/$this->{"rangecurrent"}*$this->{"rangesetting"};
    if($this->{"rangecurrent"}==$this->{"rangesetting"}){
	$widget->createLine($xo,0,$xo-$width,0,
			    -tags=>['newscale'],-fill=>$color,
			    -capstyle=>'projecting');
    }

    my$step=1;
    for(my$div=2;;$div*=2){
	my$flag=0;
	last if($width<1);
	last if($max/$div<4);
	for(my$tic=1;;$tic+=$step){
	    my$y=$height-$max/$div*$tic;
	    if($y>=0){
		$widget->createLine($xo,$y,$xo-$width,$y,
				    -tags=>['newscale'],-fill=>$color,
				    -capstyle=>'projecting');
		$flag=1;
	    }else{
		last;
	    }
	}
	$width-- if ($flag);
	$step=2;
    }
    
    # replace old scale with new scale 
    
    $widget->delete('scale');
    $widget->addtag('scale',withtag=>'newscale');
}

sub drawhscale{
    my$this=shift;

    # length is in barlength
    # current scale setting in rangecurrent
    # scale 'goal' in rangesetting (may smooth-scroll)
    # current max meter setting in metermax
    # (other meter settings in meter0, meter1, meter2....)

    # build new scale 
    my$widget=$this->{"widget"};
    my$color=$widget->optionGet("scalecolor","Scalecolor");
    my$yo=$this->{"scalew"}-2;
    my$width=$this->{"width"};
    my$height=4;

    $widget->createLine(0,$yo-$height,0,$yo,$width-1,$yo,
			-tags=>['newscale'],-fill=>$color,
			-capstyle=>'projecting');
    
    # powers of two. tics no closer than every 4 pixels
    my$max=$width/$this->{"rangecurrent"}*$this->{"rangesetting"};
    if($this->{"rangecurrent"}==$this->{"rangesetting"}){
	$widget->createLine($width-1,$yo-$height,$width-1,$yo,
			    -tags=>['newscale'],-fill=>$color,
			    -capstyle=>'projecting');
    }
    
    my$step=1;
    for(my$div=2;;$div*=2){
	my$flag=0;
	last if($max/$div<4);
	last if($height<1);
	for(my$tic=1;;$tic+=$step){
	    my$x=$max/$div*$tic;
	    if($x<$width){
		$widget->createLine($x,$yo-$height,$x,$yo,
				    -tags=>['newscale'],-fill=>$color,
				    -capstyle=>'projecting');
		$flag=1;
	    }else{
		last;
	    }
	}
	$height-- if ($flag);
	$step=2;
    }

    # replace old scale with new scale 
    
    $widget->delete('scale');
    $widget->addtag('scale',withtag=>'newscale');
}

sub set{
    my$this=shift;

    my$num=$this->{"num"};
    my$metermax;
    my$length=$this->{"barlength"};
    my$widget=$this->{"widget"};

    my$scalep=0;
    my$scrollp=1;

    $scalep=1 if ($widget->optionGet("scale","") eq 'true');
    $scroll=0 if ($widget->optionGet("scalescroll","") eq 'false');

    # length is in barlength
    # current scale setting in rangecurrent
    # scale 'goal' in rangesetting (may smooth-scroll)
    # current max meter setting in metermax
    # (other meter settings in meter0, meter1, meter2....)

    if(defined($metermax=shift)){
	$this->{"meter0"}=$metermax;
	my$i=1;
	while(defined(my$val=shift)){
	    $this->{"meter$i"}=$val;
	    $metermax=$val if ($val>$metermax);
	    $i++;
	}
	
	$this->{"metermax"}=$metermax;
    }else{
	# nope... probably just a scale update
	$metermax=$this->{"metermax"};
    }

    my$flag=0;
    if(!$this->{"fixed"}){
    # scale hysteresis
	my$ethresh=$widget->optionGet("scalethresh","");
	my$minscale=$this->{"minscale"};
	my$scalereturn=$widget->optionGet("scalereturn","");
	my$scaletimer=$this->{"scaletimer"}+1;
	my$scalemax=$this->{"scalemax"};

	while($metermax>$this->{"rangesetting"}){
	    $this->{"rangesetting"}*=2;
	    $scaletimer=0; # reset the timer
	    $scalemax=$metermax;
	    $flag=1;
	}
	
	# check to see if we need to lower the scale.  first, have we 
	# timed out?

	if($scaletimer>=$scalereturn && 	       
	   $this->{"rangesetting"}==$this->{"rangecurrent"}){
	    # we have. compare against the largest value in the past
	    # hysteresis period

	    $scalemax=$metermax if($scalereturn==0);
	    
	    if($this->{"rangesetting"}/2>=$minscale && 
		  $scalemax*$ethresh<$this->{"rangesetting"}){
		
		$this->{"rangesetting"}/=2;
		$flag=1;
	    }
	    
	    $scaletimer=0; # reset the timer
	    $scalemax=0;	    
	}
	$scalemax=$metermax if($scalemax<$metermax);
	$this->{"scaletimer"}=$scaletimer;
	$this->{"scalemax"}=$scalemax;
	if($flag){
	    my$val=int($this->{'rangesetting'});
	    
	    $this->{"numlabel"}->destroy;
	    $this->{"numlabel"}=$this->promptlabel($val,$this->{'prompt'});
	    $this->{"rangediff"}=$this->{"rangesetting"}-
		$this->{"rangecurrent"};
	}
    }

    if($this->{"rangecurrent"}!=$this->{"rangesetting"}){
	if(!$scalep || !$scrollp){
	    $this->{"rangecurrent"}=$this->{"rangesetting"};
	}else{
	    if(abs($this->{"rangecurrent"}/$this->{"rangesetting"}-1)<.02){
		$this->{"rangecurrent"}=$this->{"rangesetting"};
	    }else{
		$this->{"rangecurrent"}+=$this->{"rangediff"}*.1;
	    }
	}
	my $orient=$main::orient;
	if($orient eq 'vertical'){
	    $this->drawvscale;
	}else{
	    $this->drawhscale;
	}
    }

    for(my$i=0;$i<$num;$i++){
	my$val=$this->{"meter$i"}/$this->{"rangecurrent"}*$length;
	$this->{"bar$i"}->set($val);
    }
    
    if($this->{"rangecurrent"}!=$this->{"rangesetting"}){
	$this->{"anitimer"}->cancel if(defined($this->{"anitimer"}));
	$this->{"anitimer"}=$this->{"widget"}->after(30,sub{$this->set;});
    }
}

1;


