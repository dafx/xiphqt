#include <math.h>
#include <gtk/gtk.h>

int current_panel=0;

gboolean supports_alpha = FALSE;
static void screen_changed(GtkWidget *widget, GdkScreen *old_screen, gpointer userdata)
{
  /* To check if the display supports alpha channels, get the colormap */
  GdkScreen *screen = gtk_widget_get_screen(widget);
  GdkColormap *colormap = gdk_screen_get_rgba_colormap(screen);

  if (!colormap){
    printf("Your screen does not support alpha channels!\n");
    colormap = gdk_screen_get_rgb_colormap(screen);
    supports_alpha = FALSE;
  }else{
    supports_alpha = TRUE;
  }

  gtk_widget_set_colormap(widget, colormap);
}

static gboolean expose_toplevel(GtkWidget *widget,
                                GdkEventExpose *event,
                                gpointer userdata){
  cairo_t *cr = gdk_cairo_create(widget->window);
  int w=widget->allocation.width;
  int h=widget->allocation.height;

  /* clear background to transparent */
  cairo_set_operator (cr, CAIRO_OPERATOR_SOURCE);
  cairo_set_source_rgba (cr, 0, 0, 0, 0); /* transparent */
  cairo_paint (cr);

  /* rounded rectangle path */
  double
    x         = 1,        /* parameters like cairo_rectangle */
    y         = 1,
    width     = w-2,
    height    = h-2,
    radius    = 8.0;
  double degrees = M_PI / 180.0;

  cairo_new_sub_path (cr);
  cairo_arc (cr, x+width-radius, y+radius, radius, -90*degrees, 0);
  cairo_arc (cr, x+width-radius, y+height-radius, radius, 0, 90*degrees);
  cairo_arc (cr, x+radius, y+height-radius, radius, 90*degrees, 180*degrees);
  cairo_arc (cr, x+radius, y+radius, radius, 180*degrees, 270*degrees);
  cairo_close_path (cr);

  /* fill translucent dark background */
  cairo_set_source_rgba (cr, 0, 0, 0, .5);
  cairo_fill_preserve (cr);

  /* stroke border */
  cairo_set_line_width(cr,2.0);
  cairo_set_source_rgba (cr, .8, .8, .8, 1);
  cairo_stroke(cr);

  cairo_destroy(cr);

  return FALSE;
}

void expose_a_widget(gpointer a, gpointer b){
  GtkWidget *widget = (GtkWidget *)a;
  GdkEventExpose *event = (GdkEventExpose *)b;
  GTK_WIDGET_CLASS(GTK_WIDGET_GET_CLASS(widget))->
    expose_event (widget, event);
}

static gboolean expose_toggle_button(GtkWidget *widget,
                                     GdkEventExpose *event,
                                     gpointer userdata){
  cairo_t *cr = gdk_cairo_create(widget->window);
  int w=widget->allocation.width;
  int h=widget->allocation.height;
  GtkStateType state = gtk_widget_get_state(widget);
  int lit = userdata ? *(int *)userdata : 0;
  /* rounded rectangle path */
  double
    x         = widget->allocation.x,
    y         = widget->allocation.y,
    width     = w-2,
    height    = h-2,
    radius    = 4.0;
  double degrees = M_PI / 180.0;

  cairo_new_sub_path (cr);
  cairo_arc (cr, x+width-radius, y+radius, radius, -90*degrees, 0);
  cairo_arc (cr, x+width-radius, y+height-radius, radius, 0, 90*degrees);
  cairo_arc (cr, x+radius, y+height-radius, radius, 90*degrees, 180*degrees);
  cairo_arc (cr, x+radius, y+radius, radius, 180*degrees, 270*degrees);
  cairo_close_path (cr);

  /* fill background */
  switch(state){
  case GTK_STATE_NORMAL:
    cairo_set_source_rgba (cr, .1, .1, .1, 1);
    break;
  case GTK_STATE_ACTIVE:
    cairo_set_source_rgba (cr, .1, .3, .6, 1);
    break;
  case GTK_STATE_SELECTED:
    cairo_set_source_rgba (cr, .2, .4, .7, 1);
    break;
  case GTK_STATE_PRELIGHT:
    if(gtk_toggle_button_get_active)
      cairo_set_source_rgba (cr, .1, .3, .6, 1);
    else
      cairo_set_source_rgba (cr, .1, .1, .1, 1);
    break;
  case GTK_STATE_INSENSITIVE:
    if(lit)
      cairo_set_source_rgba (cr, .1, .3, .6, .5);
    else
      cairo_set_source_rgba (cr, 0, 0, 0, .5);
    break;
  }
  cairo_fill_preserve (cr);

  /* stroke border */
  if(state != GTK_STATE_INSENSITIVE){
    cairo_set_line_width(cr,2.0);
    cairo_set_source_rgba (cr, .8, .8, .8, 1);
    cairo_stroke(cr);
  }
  cairo_destroy(cr);

  /* have to do this by hand as returning TRUE below short-circuits
     the whole expose chain */
  GList *children=gtk_container_get_children(GTK_CONTAINER(widget));
  g_list_foreach(children,expose_a_widget,event);

  return TRUE;
}

static gboolean expose_upbutton(GtkWidget *widget,
                                GdkEventExpose *event,
                                gpointer userdata){
  cairo_t *cr = gdk_cairo_create(widget->window);
  int w=widget->allocation.width;
  int h=widget->allocation.height;
  GtkStateType state = gtk_widget_get_state(widget);

  if(state == GTK_STATE_INSENSITIVE) return TRUE;

  /* rounded arrow path */
  double
    radius    = 4.0,
    scale     = (w/2>h?h:w/2)-radius*2,
    x         = widget->allocation.x+w/2,        /* parameters like cairo_rectangle */
    y         = widget->allocation.y+radius;
  double degrees = M_PI / 180.0;

  cairo_new_sub_path (cr);
  cairo_arc (cr, x, y, radius, 225*degrees, 315*degrees);
  cairo_arc (cr, x+scale, y+scale, radius, -45*degrees, 135*degrees);
  cairo_line_to (cr, x, y+sqrt(2)*radius);
  cairo_arc (cr, x-scale, y+scale, radius, 45*degrees, 225*degrees);
  cairo_close_path (cr);

  /* fill translucent light background */
  if(state == GTK_STATE_PRELIGHT)
    cairo_set_source_rgba (cr, 1, 1, 1, .5);
  else
    cairo_set_source_rgba (cr, .8, .8, .8, .5);
  cairo_fill_preserve (cr);

  /* stroke border */
  cairo_set_line_width(cr,1.0);
  if(state == GTK_STATE_ACTIVE)
    cairo_set_source_rgba (cr, .5, .6, .83, 1);
  else
    cairo_set_source_rgba (cr, .8, .8, .8, 1);
  cairo_stroke(cr);

  cairo_destroy(cr);

  return TRUE;
}

static gboolean expose_downbutton(GtkWidget *widget,
                                  GdkEventExpose *event,
                                  gpointer userdata){
  cairo_t *cr = gdk_cairo_create(widget->window);
  int w=widget->allocation.width;
  int h=widget->allocation.height;
  GtkStateType state = gtk_widget_get_state(widget);

  if(state == GTK_STATE_INSENSITIVE) return TRUE;

  /* rounded arrow path */
  double
    radius    = 4.0,
    scale     = (w/2>h?h:w/2)-radius*2,
    x         = widget->allocation.x+w/2,        /* parameters like cairo_rectangle */
    y         = widget->allocation.y+h-radius-1;
  double degrees = M_PI / 180.0;

  cairo_new_sub_path (cr);
  cairo_arc (cr, x, y, radius, -315*degrees, -225*degrees);
  cairo_arc (cr, x-scale, y-scale, radius, -225*degrees, -45*degrees);
  cairo_line_to (cr, x, y-sqrt(2)*radius);
  cairo_arc (cr, x+scale, y-scale, radius, -135*degrees, 45*degrees);
  cairo_close_path (cr);

  /* fill translucent light background */
  if(state == GTK_STATE_PRELIGHT)
    cairo_set_source_rgba (cr, 1, 1, 1, .5);
  else
    cairo_set_source_rgba (cr, .8, .8, .8, .5);
  cairo_fill_preserve (cr);

  /* stroke border */
  cairo_set_line_width(cr,1.0);
  if(state == GTK_STATE_ACTIVE)
    cairo_set_source_rgba (cr, .5, .6, .83, 1);
  else
    cairo_set_source_rgba (cr, .8, .8, .8, 1);
  cairo_stroke(cr);

  cairo_destroy(cr);

  return TRUE;
}

static void make_panel(void){
  int w=1024;
  int h=150;
  int rows = 4;

  GtkWidget *toplevel=NULL;
  GtkWidget *topbox=NULL;
  GtkWidget *rightbox=NULL;
  GtkWidget *leftbox=NULL;
  GtkWidget *scrollfix=NULL;
  GtkWidget *lefttable=NULL;
  GtkWidget *upbutton=NULL;
  GtkWidget *downbutton=NULL;
  GtkWidget *panels[rows];

  int i;

  toplevel = gtk_window_new (GTK_WINDOW_TOPLEVEL);
  gtk_widget_set_app_paintable(toplevel, TRUE);
  g_signal_connect(G_OBJECT(toplevel), "screen-changed", G_CALLBACK(screen_changed), NULL);
  g_signal_connect(G_OBJECT(toplevel), "expose-event", G_CALLBACK(expose_toplevel), NULL);

  /* toplevel is a fixed size, meant to be nailed to the screen in one
     spot */
  gtk_widget_set_size_request(GTK_WIDGET(toplevel),w,h);
  gtk_window_set_resizable(GTK_WINDOW(toplevel),FALSE);
  gtk_window_set_decorated(GTK_WINDOW(toplevel),FALSE);
  gtk_window_set_gravity(GTK_WINDOW(toplevel),GDK_GRAVITY_SOUTH_WEST);
  gtk_window_move (GTK_WINDOW(toplevel),0,gdk_screen_height()-1);

  /* multiple sliding panes within */
  topbox = gtk_hbox_new(0,0);
  rightbox = gtk_vbox_new(0,0);
  leftbox = gtk_hbox_new(1,0);
  scrollfix = gtk_fixed_new();
  lefttable = gtk_table_new(rows,1,1);
  upbutton = gtk_button_new_with_label("^");
  downbutton = gtk_button_new_with_label("v");

  gtk_widget_set_size_request(GTK_WIDGET(upbutton),60,25);
  gtk_widget_set_size_request(GTK_WIDGET(downbutton),60,25);

  gtk_container_add(GTK_CONTAINER(toplevel),topbox);
  gtk_container_set_border_width(GTK_CONTAINER(topbox),2);
  gtk_box_pack_start(GTK_BOX(topbox),leftbox,1,1,0);
  gtk_box_pack_end(GTK_BOX(topbox),rightbox,0,0,0);
  gtk_box_pack_start(GTK_BOX(leftbox),scrollfix,1,1,0);
  gtk_box_pack_start(GTK_BOX(rightbox),upbutton,0,0,0);
  gtk_box_pack_end(GTK_BOX(rightbox),downbutton,0,0,0);

  g_signal_connect(G_OBJECT(upbutton), "expose-event", G_CALLBACK(expose_upbutton), NULL);
  g_signal_connect(G_OBJECT(downbutton), "expose-event", G_CALLBACK(expose_downbutton), NULL);

  gtk_widget_set_size_request(lefttable,w-4,-1);
  gtk_fixed_put(GTK_FIXED(scrollfix),lefttable,0,0);


  /* build the sliding frame table */
  int boxborder=10;
  for(i=0;i<rows;i++){
    GtkWidget *heightbox = gtk_hbox_new(0,0);
    GtkWidget *heightforce = gtk_vbox_new(1,0);
    GtkWidget *panelframe = gtk_frame_new("foo label");
    GtkWidget *buttonbox = gtk_hbox_new(0,0);

    gtk_table_attach(GTK_TABLE(lefttable),heightbox,0,1,i,i+1,
                     GTK_EXPAND|GTK_FILL,0,0,0);
    gtk_box_pack_start(GTK_BOX(heightbox),heightforce,0,0,0);
    gtk_widget_set_size_request(heightforce,1,h-4);

    gtk_widget_set_name(panelframe,"topframe");
    gtk_frame_set_label_align(GTK_FRAME(panelframe),.5,.5);
    gtk_container_set_border_width(GTK_CONTAINER(panelframe),boxborder);
    gtk_frame_set_shadow_type(GTK_FRAME(panelframe),GTK_SHADOW_NONE);
    gtk_box_pack_start(GTK_BOX(heightbox),panelframe,1,1,0);
    gtk_container_add(GTK_CONTAINER(panelframe),buttonbox);
    gtk_container_set_border_width(GTK_CONTAINER(buttonbox),boxborder);

    GtkWidget *tmp=gtk_toggle_button_new_with_label("foo");
    g_signal_connect(G_OBJECT(tmp), "expose-event", G_CALLBACK(expose_rectarea), NULL);
    gtk_widget_set_size_request(tmp,h,-1);
    gtk_box_pack_start(GTK_BOX(buttonbox),tmp,0,0,10);
  }


  screen_changed(toplevel, NULL, NULL);
  gtk_widget_show_all(toplevel);
}

main(int argc, char **argv){
  gtk_init (&argc, &argv);

  gtk_rc_parse_string
    ("style \"panel\" {"
     "  bg[NORMAL]=\"#000000\""
     "  bg[ACTIVE]=\"#000000\""
     "  bg[PRELIGHT]=\"#000000\""
     "  bg[SELECTED]=\"#000000\""
     "  bg[INSENSITIVE]=\"#000000\""

     "  fg[NORMAL]=\"#ffffff\""
     "  fg[ACTIVE]=\"#ffffff\""
     "  fg[PRELIGHT]=\"#ffffff\""
     "  fg[SELECTED]=\"#000000\""
     "  fg[INSENSITIVE]=\"#000000\""

     "  base[NORMAL]=\"#000000\""
     "  base[ACTIVE]=\"#000000\""
     "  base[PRELIGHT]=\"#000000\""
     "  base[SELECTED]=\"#000000\""
     "  base[INSENSITIVE]=\"#000000\""

     "  text[NORMAL]=\"#ffffff\""
     "  text[ACTIVE]=\"#ffffff\""
     "  text[PRELIGHT]=\"#ffffff\""
     "  text[SELECTED]=\"#000000\""
     "  text[INSENSITIVE]=\"#000000\""
     "}"

     "style \"topframe\" {"
     "  font_name = \"sans 10 bold\""
     "  fg[NORMAL]=\"#cccccc\""
     "}"

     "style \"button\" {"
     "  font_name = \"sans 8\""
     "  GtkButton::focus-padding = 0"
     "  GtkButton::focus-line-width = 0"
     "  GtkButton::interior-focus = 0"
     "  bg[NORMAL]=\"#406090\""
     "  bg[ACTIVE]=\"#6080a0\""
     "  bg[PRELIGHT]=\"#6080a0\""
     "  bg[SELECTED]=\"#d0e6ff\""
     "  bg[INSENSITIVE]=\"#b0c0d8\""

     "  fg[NORMAL]=\"#ffffff\""
     "  fg[ACTIVE]=\"#ffffff\""
     "  fg[PRELIGHT]=\"#ffffff\""
     "  fg[SELECTED]=\"#000000\""
     "  fg[INSENSITIVE]=\"#000000\""

     "  base[NORMAL]=\"#000000\""
     "  base[ACTIVE]=\"#000000\""
     "  base[PRELIGHT]=\"#000000\""
     "  base[SELECTED]=\"#000000\""
     "  base[INSENSITIVE]=\"#000000\""

     "  text[NORMAL]=\"#ffffff\""
     "  text[ACTIVE]=\"#ffffff\""
     "  text[PRELIGHT]=\"#ffffff\""
     "  text[SELECTED]=\"#000000\""
     "  text[INSENSITIVE]=\"#000000\""
     "}"

     "class \"*\" style \"panel\""
     "widget \"*.topframe\" style \"topframe\""
     "widget \"*.topframe.GtkLabel\" style \"topframe\""
     "class \"GtkButton\" style \"button\""
     );

  make_panel();
  gtk_main();


}
