<?xml version="1.0"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?rfc toc="yes" ?>
<?rfc tocindent="no" ?>
<?rfc symrefs="yes" ?>
<?rfc rfcedstyle="yes" ?>

<rfc ipr="full3978" docName="draft-pfeiffer-rfc3533bis-00" updates="3533" category="std" submissionType="IETF" xml:lang="en">
	<front>
		<title>The Ogg Encapsulation Format</title>
		<author initials="S." surname="Pfeiffer" fullname="Silvia Pfeiffer">
			<organization abbrev="Xiph">Xiph.Org Foundation</organization>
			<address>
				<email>silvia@annodex.net</email>
				<uri>http://annodex.net/</uri>
			</address>
		</author>
		<author initials="C." surname="Montgomery" fullname="Christopher Montgomery">
			<organization abbrev="Xiph">Xiph.Org Foundation</organization>
			<address>
				<postal>
					<street>21 College Hill Road</street>
					<city>Somerville</city>
					<region>MA</region>
					<code>02144</code>
					<country>US</country>
				</postal>
				<email>monty@xiph.org</email>
				<uri>http://xiph.org</uri>
			</address>
		</author>
		<date day="8" month="April" year="2008"/>
		<area>Internet</area>
		<keyword>I-D</keyword>
		<keyword>Internet-Draft</keyword>
		<keyword>Ogg</keyword>
		<keyword>Container</keyword>
		<keyword>Encapsulation</keyword>
		<abstract>
			<t>This document describes the Ogg bitstream format, which is a general, freely-available encapsulation format for media streams.  It is able to encapsulate any kind and number of video and audio encoding formats as well as other data streams in a single bitstream.</t>
		</abstract>
	</front>
	<middle>
		<section title="Introduction">
			<t>The Ogg bitstream format has been developed as a part of a larger project aimed at creating a set of components for the coding and decoding of multimedia content (codecs) which are to be freely available and freely re-implementable, both in software and in hardware for the computing community at large, including the Internet community.  It is the intention of the Ogg developers represented by Xiph.Org that it be usable without intellectual property concerns.</t>
			<t>This document describes the Ogg bitstream format and how to use it to encapsulate one or several media bitstreams created by one or several encoders.  The Ogg transport bitstream is designed to provide framing, error protection and seeking structure for higher-level codec streams that consist of raw, unencapsulated data packets, such as the Vorbis audio codec or the upcoming Tarkin and Theora video codecs.  It is capable of interleaving different binary media and other time-continuous data streams that are prepared by an encoder as a sequence of data packets.  Ogg provides enough information to properly separate data back into such encoder created data packets at the original packet boundaries without relying on decoding to find packet boundaries.</t>
		</section>
		<section title="Conformance and Document Conventions">
			<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14, <xref target="RFC2119"/> and indicate requirement levels for compliant implementations.  Requirements apply to all implementations unless otherwise stated.</t>
			<t>An implementation is a software module that supports one of the media types defined in this document.  Software modules may support multiple media types, but conformance is considered individually for each type.</t>
			<t>Implementations that fail to satisfy one or more "MUST" requirements are considered non-compliant.  Implementations that satisfy all "MUST" requirements, but fail to satisfy one or more "SHOULD" requirements, are said to be "conditionally compliant".  All other implementations are "unconditionally compliant".</t>
		</section>
		<section title="Definitions">
			<t>For describing the Ogg encapsulation process, a set of terms will be used whose meaning needs to be well understood.  Therefore, some of the most fundamental terms are defined now before we start with the description of the requirements for a generic media stream encapsulation format, the process of encapsulation, and the concrete format of the Ogg bitstream.  See the Appendix for a more complete glossary.</t>
			<t>The result of an Ogg encapsulation is called the "Physical (Ogg) Bitstream".  It encapsulates one or several encoder-created bitstreams, which are called "Logical Bitstreams".  A logical bitstream, provided to the Ogg encapsulation process, has a structure, i.e., it is split up into a sequence of so-called "Packets".  The packets are created by the encoder of that logical bitstream and represent meaningful entities for that encoder only (e.g., an uncompressed stream may use video frames as packets).  They do not contain boundary information &mdash; strung together they appear to be streams of random bytes with no landmarks.</t>
			<t>Please note that the term "packet" is not used in this document to signify entities for transport over a network.</t>
		</section>
		<section title="Requirements for a generic encapsulation format">
			<t>The design idea behind Ogg was to provide a generic, linear media transport format to enable both file-based storage and stream-based transmission of one or several interleaved media streams independent of the encoding format of the media data.  Such an encapsulation format needs to provide:</t>
			<t>
				<list style="hanging">
					<t>framing for logical bitstreams.</t>
					<t>interleaving of different logical bitstreams.</t>
					<t>detection of corruption.</t>
					<t>recapture after a parsing error.</t>
					<t>position landmarks for direct random access of arbitrary positions in the bitstream.</t>
					<t>streaming capability (i.e., no seeking is needed to build a 100% complete bitstream).</t>
					<t>small overhead (i.e., use no more than approximately 1-2% of bitstream bandwidth for packet boundary marking, high-level framing, sync and seeking).</t>
					<t>simplicity to enable fast parsing.</t>
					<t>simple concatenation mechanism of several physical bitstreams.</t>
				</list>
			</t>
			<t>All of these design considerations have been taken into consideration for Ogg.  Ogg supports framing and interleaving of logical bitstreams, seeking landmarks, detection of corruption, and stream resynchronisation after a parsing error with no more than approximately 1-2% overhead.  It is a generic framework to perform encapsulation of time-continuous bitstreams.  It does not know any specifics about the codec data that it encapsulates and is thus independent of any media codec.</t>
		</section>
		<section title="The Ogg bitstream format">
			<t>A physical Ogg bitstream consists of multiple logical bitstreams interleaved in so-called "Pages".  Whole pages are taken in order from multiple logical bitstreams multiplexed at the page level.  The logical bitstreams are identified by a unique serial number in the header of each page of the physical bitstream.  This unique serial number is created randomly and does not have any connection to the content or encoder of the logical bitstream it represents.  Pages of all logical bitstreams are concurrently interleaved, but they need not be in a regular order &mdash; they are only required to be consecutive within the logical bitstream.  Ogg demultiplexing reconstructs the original logical bitstreams from the physical bitstream by taking the pages in order from the physical bitstream and redirecting them into the appropriate logical decoding entity.</t>
			<t>Each Ogg page contains only one type of data as it belongs to one logical bitstream only.  Pages are of variable size and have a page header containing encapsulation and error recovery information.  Each logical bitstream in a physical Ogg bitstream starts with a special start page (bos=beginning of stream) and ends with a special page (eos=end of stream).</t>
			<t>The bos page contains information to uniquely identify the codec type and MAY contain information to set up the decoding process.  The bos page SHOULD also contain information about the encoded media &mdash; for example, for audio, it should contain the sample rate and number of channels.  By convention, the first bytes of the bos page contain magic data that uniquely identifies the required codec.  It is the responsibility of anyone fielding a new codec to make sure it is possible to reliably distinguish his/her codec from all other codecs in use.  There is no fixed way to detect the end of the codec-identifying marker.  The format of the bos page is dependent on the codec and therefore MUST be given in the encapsulation specification of that logical bitstream type.  Ogg also allows but does not require secondary header packets after the bos page for logical bitstreams and these must also precede any data packets in any logical bitstream.  These subsequent header packets are framed into an integral number of pages, which will not contain any data packets.  So, a physical bitstream begins with the bos pages of all logical bitstreams containing one initial header packet per page, followed by the subsidiary header packets of all streams, followed by pages containing data packets.</t>
			<t>The encapsulation specification for one or more logical bitstreams is called a "media mapping".  An example for a media mapping is "Ogg Vorbis", which uses the Ogg framework to encapsulate Vorbis-encoded audio data for stream-based storage (such as files) and transport (such as TCP streams or pipes).  Ogg Vorbis provides the name and revision of the Vorbis codec, the audio rate and the audio quality on the Ogg Vorbis bos page.  It also uses two additional header packets per logical bitstream.  The Ogg Vorbis bos page starts with the byte 0x01, followed by "vorbis" (a total of 7 bytes of identifier).</t>
			<t>Ogg knows two types of multiplexing: concurrent multiplexing (so-called "Grouping") and sequential multiplexing (so-called "Chaining").  Grouping defines how to interleave several logical bitstreams page-wise in the same physical bitstream.  Grouping is for example needed for interleaving a video stream with several synchronised audio tracks using different codecs in different logical bitstreams.  Chaining on the other hand, is defined to provide a simple mechanism to concatenate physical Ogg bitstreams, as is often needed for streaming applications.</t>
			<t>In grouping, all bos pages of all logical bitstreams MUST appear together at the beginning of the Ogg bitstream.  The media mapping specifies the order of the initial pages.  For example, the grouping of a specific Ogg video and Ogg audio bitstream may specify that the physical bitstream MUST begin with the bos page of the logical video bitstream, followed by the bos page of the audio bitstream.  Unlike bos pages, eos pages for the logical bitstreams need not all occur contiguously.  Eos pages may be 'nil' pages, that is, pages containing no content but simply a page header with position information and the eos flag set in the page header.  Each grouped logical bitstream MUST have a unique serial number within the scope of the physical bitstream.</t>
			<t>In chaining, complete logical bitstreams are concatenated.  The bitstreams do not overlap, i.e., the eos page of a given logical bitstream is immediately followed by the bos page of the next.  Each chained logical bitstream MUST have a unique serial number within the scope of the physical bitstream.</t>
			<t>It is possible to consecutively chain groups of concurrently multiplexed bitstreams.  The groups, when unchained, MUST stand on their own as a valid concurrently multiplexed bitstream.  The following diagram shows a schematic example of such a physical bitstream that obeys all the rules of both grouped and chained multiplexed bitstreams.</t>
			<figure>
				<artwork><![CDATA[
               physical bitstream with pages of
          different logical bitstreams grouped and chained
      -------------------------------------------------------------
      |*A*|*B*|*C*|A|A|C|B|A|B|#A#|C|...|B|C|#B#|#C#|*D*|D|...|#D#|
      -------------------------------------------------------------
       bos bos bos             eos           eos eos bos       eos
				]]></artwork>
			</figure>
			<t>In this example, there are two chained physical bitstreams, the first of which is a grouped stream of three logical bitstreams A, B, and C.  The second physical bitstream is chained after the end of the grouped bitstream, which ends after the last eos page of all its grouped logical bitstreams.  As can be seen, grouped bitstreams begin together &mdash; all of the bos pages MUST appear before any data pages.  It can also be seen that pages of concurrently multiplexed bitstreams need not conform to a regular order.  And it can be seen that a grouped bitstream can end long before the other bitstreams in the group end.</t>
			<t>Ogg does not know any specifics about the codec data except that each logical bitstream belongs to a different codec, the data from the codec comes in order and has position markers (so-called "Granule positions").  Ogg does not have a concept of 'time': it only knows about sequentially increasing, unitless position markers.  An application can only get temporal information through higher layers which have access to the codec APIs to assign and convert granule positions or time.</t>
			<t>A specific definition of a media mapping using Ogg may put further constraints on its specific use of the Ogg bitstream format.  For example, a specific media mapping may require that all the eos pages for all grouped bitstreams need to appear in direct sequence.  An example for a media mapping is the specification of "Ogg Vorbis".  Another example is the upcoming "Ogg Theora" specification which encapsulates Theora-encoded video data and usually comes multiplexed with a Vorbis stream for an Ogg containing synchronised audio and video.  As Ogg does not specify temporal relationships between the encapsulated concurrently multiplexed bitstreams, the temporal synchronisation between the audio and video stream will be specified in this media mapping.  To enable streaming, pages from various logical bitstreams will typically be interleaved in chronological order.</t>
		</section>
		<section title="The encapsulation process">
			<t>The process of multiplexing different logical bitstreams happens at the level of pages as described above.  The bitstreams provided by encoders are however handed over to Ogg as so-called "Packets" with packet boundaries dependent on the encoding format.  The process of encapsulating packets into pages will be described now.</t>
			<t>From Ogg's perspective, packets can be of any arbitrary size.  A specific media mapping will define how to group or break up packets from a specific media encoder.  As Ogg pages have a maximum size of about 64 kBytes, sometimes a packet has to be distributed over several pages.  To simplify that process, Ogg divides each packet into 255 byte long chunks plus a final shorter chunk.  These chunks are called "Ogg Segments".  They are only a logical construct and do not have a header for themselves.</t>
			<t>A group of contiguous segments is wrapped into a variable length page preceded by a header.  A segment table in the page header tells about the "Lacing values" (sizes) of the segments included in the page.  A flag in the page header tells whether a page contains a packet continued from a previous page.  Note that a lacing value of 255 implies that a second lacing value follows in the packet, and a value of less than 255 marks the end of the packet after that many additional bytes.  A packet of 255 bytes (or a multiple of 255 bytes) is terminated by a lacing value of 0.  Note also that a 'nil' (zero length) packet is not an error; it consists of nothing more than a lacing value of zero in the header.</t>
			<t>The encoding is optimized for speed and the expected case of the majority of packets being between 50 and 200 bytes large.  This is a design justification rather than a recommendation.  This encoding both avoids imposing a maximum packet size as well as imposing minimum overhead on small packets.  In contrast, e.g., simply using two bytes at the head of every packet and having a max packet size of 32 kBytes would always penalize small packets (< 255 bytes, the typical case) with twice the segmentation overhead.  Using the lacing values as suggested, small packets see the minimum possible byte-aligned overhead (1 byte) and large packets (>512 bytes) see a fairly constant ~0.5% overhead on encoding space.</t>
			<t>The following diagram shows a schematic example of a media mapping using Ogg and grouped logical bitstreams:</t>
			<figure>
				<artwork><![CDATA[
          logical bitstream with packet boundaries
 -----------------------------------------------------------------
 > |       packet_1             | packet_2         | packet_3 |  <
 -----------------------------------------------------------------

                     |segmentation (logically only)
                     v

      packet_1 (5 segments)          packet_2 (4 segs)    p_3 (2 segs)
     ------------------------------ -------------------- ------------
 ..  |seg_1|seg_2|seg_3|seg_4|s_5 | |seg_1|seg_2|seg_3|| |seg_1|s_2 | ..
     ------------------------------ -------------------- ------------

                     | page encapsulation
                     v

 page_1 (packet_1 data)   page_2 (pket_1 data)   page_3 (packet_2 data)
------------------------  ----------------  ------------------------
|H|------------------- |  |H|----------- |  |H|------------------- |
|D||seg_1|seg_2|seg_3| |  |D|seg_4|s_5 | |  |D||seg_1|seg_2|seg_3| | ...
|R|------------------- |  |R|----------- |  |R|------------------- |
------------------------  ----------------  ------------------------

                    |
pages of            |
other    --------|  |
logical         -------
bitstreams      | MUX |
                -------
                   |
                   v

              page_1  page_2          page_3
      ------  ------  -------  -----  -------
 ...  ||   |  ||   |  ||    |  ||  |  ||    |  ...
      ------  ------  -------  -----  -------
              physical Ogg bitstream
				]]></artwork>
			</figure>
			<t>In this example we take a snapshot of the encapsulation process of one logical bitstream.  We can see part of that bitstream's subdivision into packets as provided by the codec.  The Ogg encapsulation process chops up the packets into segments.  The packets in this example are rather large such that packet_1 is split into 5 segments &mdash; 4 segments with 255 bytes and a final smaller one.  Packet_2 is split into 4 segments &mdash; 3 segments with 255 bytes and a final very small one &mdash; and packet_3 is split into two segments.  The encapsulation process then creates pages, which are quite small in this example.  Page_1 consists of the first three segments of packet_1, page_2 contains the remaining 2 segments from packet_1, and page_3 contains the first three pages of packet_2.  Finally, this logical bitstream is multiplexed into a physical Ogg bitstream with pages of other logical bitstreams.</t>
		</section>
		<section title="The Ogg page format">
			<t>A physical Ogg bitstream consists of a sequence of concatenated pages.  Pages are of variable size, usually 4-8 kB, maximum 65307 bytes.  A page header contains all the information needed to demultiplex the logical bitstreams out of the physical bitstream and to perform basic error recovery and landmarks for seeking.  Each page is a self-contained entity such that the page decode mechanism can recognize, verify, and handle single pages at a time without requiring the overall bitstream.</t>
			<t>The Ogg page header has the following format:</t>
			<figure>
				<artwork><![CDATA[
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1| Byte
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| capture_pattern: Magic number for page start "OggS"           | 0-3
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| version       | header_type   | granule_position              | 4-7
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               | 8-11
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                               | bitstream_serial_number       | 12-15
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                               | page_sequence_number          | 16-19
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                               | CRC_checksum                  | 20-23
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                               |page_segments  | segment_table | 24-27
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| ...                                                           | 28-
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
				]]></artwork>
			</figure>
			<t>The LSb (least significant bit) comes first in the Bytes.  Fields with more than one byte length are encoded LSB (least significant byte) first.</t>
			<t>The fields in the page header have the following meaning:</t>
			<t>1. capture_pattern: a 4 Byte field that signifies the beginning of a page.  It contains the magic numbers:</t>
			<t>
				<list style="hanging">
					<t>0x4f 'O'</t>
					<t>0x67 'g'</t>
					<t>0x67 'g'</t>
					<t>0x53 'S'</t>
				</list>
			</t>
			<t>It helps a decoder to find the page boundaries and regain synchronisation after parsing a corrupted stream.  Once the capture pattern is found, the decoder verifies page sync and integrity by computing and comparing the checksum.</t>
			<t>2. stream_structure_version: 1 Byte signifying the version number of the Ogg file format used in this stream (this document specifies version 0).</t>
			<t>3. header_type_flag: the bits in this 1 Byte field identify the specific type of this page.</t>
<t><!-- this is a list and needs to be formatted -->
      *  bit 0x01

         set: page contains data of a packet continued from the previous
            page

         unset: page contains a fresh packet

      *  bit 0x02

         set: this is the first page of a logical bitstream (bos)

         unset: this page is not a first page

      *  bit 0x04

         set: this is the last page of a logical bitstream (eos)

         unset: this page is not a last page</t>
			<t>4. granule_position: an 8 Byte field containing position information.  For example, for an audio stream, it MAY contain the total number of PCM samples encoded after including all frames finished on this page.  For a video stream it MAY contain the total number of video frames encoded after this page.  This is a hint for the decoder and gives it some timing and position information.  Its meaning is dependent on the codec for that logical bitstream and specified in a specific media mapping.  A special value of -1 (in two's complement) indicates that no packets finish on this page.</t>
			<t>5. bitstream_serial_number: a 4 Byte field containing the unique serial number by which the logical bitstream is identified.</t>
			<t>6. page_sequence_number: a 4 Byte field containing the sequence number of the page so the decoder can identify page loss.  This sequence number is increasing on each logical bitstream separately.</t>
			<t>7. CRC_checksum: a 4 Byte field containing a 32 bit CRC checksum of the page (including header with zero CRC field and page content).  The generator polynomial is 0x04c11db7.</t>
			<t>8. number_page_segments: 1 Byte giving the number of segment entries encoded in the segment table.</t>
			<t>9. segment_table: number_page_segments Bytes containing the lacing values of all segments in this page.  Each Byte contains one lacing value.</t>
			<t>The total header size in bytes is given by: header_size = number_page_segments + 27 [Byte]</t>
			<t>The total page size in Bytes is given by: page_size = header_size + sum(lacing_values: 1..number_page_segments) [Byte]</t>
		</section>
		<section title="Security Considerations">
			<t>Refer to <xref target="RFC3552"/> for a discussion of terminology used in this section.</t>
			<t>The Ogg encapsulation format is a container and only a carrier of content (such as audio, video, and displayable text data) with a very rigid definition.  This format in itself is not more vulnerable than any other content framing mechanism.</t>
			<t>Ogg does not provide for any generic encryption or signing of itself or its contained bitstreams.  However, it encapsulates any kind of binary content and is thus able to contain encrypted and signed content data.  It is also possible to add an external security mechanism that encrypts or signs an Ogg bitstream and thus provides content confidentiality and authenticity.</t>
			<t>As Ogg encapsulates binary data, it is possible to include executable content in an Ogg bitstream.  Implementations SHOULD NOT execute such content without prior validation of its origin by the end-user.  This may be an issue with applications that use Ogg for streaming or file transfer in a networking scenario.  An implementation decoding Ogg and its encapsulated data streams has to ensure correct handling of manipulated bitstreams, of buffer overflows, and similar issues.</t>
			<t>It is also possible to author malicious Ogg bitstreams, which attempt to call for an excessively large picture size, high sampling-rate audio, etc.  Implementations SHOULD protect themselves against this kind of attack.</t>
			<t>Ogg has an extensible structure, so that it is theoretically possible that metadata fields or media formats might be defined in the future which might be used to induce particular actions on the part of the recipient, thus presenting additional security risks.  However, this type of capability is currently not supported in the referenced specification.</t>
			<t>Implementations may fail to implement a specific security model or other means to prevent possibly dangerous operations.  Such failure might possibly be exploited to gain unauthorized access to a system or sensitive information; such failure constitutes an unknown factor and is thus considered out of the scope of this document.</t>
		</section>
		<section title="Interoperability Considerations">
			<t>The Ogg container format is device-, platform- and vendor-neutral and has proved to be widely implementable across different computing platforms through a wide range of encoders and decoders. A broadly portable <xref target="libogg">reference implementation</xref> is available under the revised (3-clause) BSD license, which is a Free Software license.</t>
			<t>The Xiph.Org Foundation has defined the specification, interoperability, and conformance, and conducts regular interoperability testing.</t>
		</section>
		<section title="Copying Conditions">
			<t>The authors agree to grant third parties the irrevocable right to copy, use and distribute the work, with or without modification, in any medium, without royalty, provided that, unless separate permission is granted, redistributed modified works do not contain misleading author, version, name of work, or endorsement information.</t>
		</section>
	</middle>
	<back>
		<references title="Normative References">
			<reference anchor="RFC2119">
				<front>
					<title>Key words for use in RFCs to Indicate Requirement Levels</title>
					<author initials="S." surname="Bradner" fullname="Scott O. Bradner">
						<organization>Harvard University</organization>
					</author>
					<date month="March" year="1997"/>
				</front>
				<seriesInfo name="BCP" value="14"/>
				<seriesInfo name="RFC" value="2119"/>
			</reference>
		</references>
		<references title="Informative References">
			<reference anchor="RFC3552">
				<front>
					<title>Guidelines for Writing RFC Text on Security Considerations</title>
					<author initials="E." surname="Rescorla" fullname="Eric Rescorla">
						<organization>RTFM, Inc.</organization>
					</author>
					<author initials="B." surname="Korver" fullname="Brian Korver">
						<organization>Xythos Software, Inc.</organization>
					</author>
					<date month="July" year="2003"/>
				</front>
				<seriesInfo name="BCP" value="72"/>
				<seriesInfo name="RFC" value="3552"/>
			</reference>
			<reference anchor="libogg" target="http://xiph.org/ogg/doc/libogg">
				<front>
					<title>The libogg API</title>
					<author>
						<organization abbrev="Xiph">Xiph.Org Foundation</organization>
					</author>
					<date month="June" year="2000"/>
				</front>
			</reference>
		</references>
	</back>
</rfc>