dnl Process this file with autoconf to produce a configure script

dnl ------------------------------------------------
dnl Initialization and Versioning
dnl ------------------------------------------------

AC_INIT(postfish.c)
AM_INIT_AUTOMAKE(postfish,0.0)

dnl Library versioning

V_LIB_CURRENT=0
V_LIB_REVISION=0
V_LIB_AGE=0
AC_SUBST(V_LIB_CURRENT)
AC_SUBST(V_LIB_REVISION)
AC_SUBST(V_LIB_AGE)

dnl save $CFLAGS since AC_PROG_CC likes to insert "-g -O2"
dnl if $CFLAGS is blank
cflags_save="$CFLAGS"
AC_PROG_CC
AC_PROG_CPP
CFLAGS="$cflags_save"

dnl --------------------------------------------------
dnl Set build flags based on environment
dnl --------------------------------------------------

AC_CANONICAL_HOST

dnl Set some target options

cflags_save="$CFLAGS"
ldflags_save="$LDFLAGS"
if test -z "$GCC"; then
        case $host in 
        *)
                DEBUG="-g"
                CFLAGS="-O"
                PROFILE="-g -p" ;;
        esac
else

        case $host in 
        *)
                DEBUG="-g -W -D__NO_MATH_INLINES"
                CFLAGS="-O2 -W -Wall"
                PROFILE="-W -pg -g -O2 -fno-inline-functions";;
        esac
fi
CFLAGS="$CFLAGS $cflags_save -D_REENTRANT"
LDFLAGS="$LDFLAGS $ldflags_save"

dnl --------------------------------------------------
dnl Check for headers
dnl --------------------------------------------------

AC_CHECK_HEADER(linux/soundcard.h,has_oss=yes)
if test -z "$has_oss"; then
  AC_MSG_WARN([                                                         ])
  AC_MSG_WARN([*********************************************************])
  AC_MSG_WARN([Playback currently requires OSS and configure didn't find])
  AC_MSG_WARN([soundcard.h.  For now, no OSS means Postfish can't build.])
  AC_MSG_WARN([*********************************************************])
  AC_MSG_ERROR([   bailing...                                            ])
fi	

dnl --------------------------------------------------
dnl Check for typedefs, structures, etc
dnl --------------------------------------------------

dnl none

dnl --------------------------------------------------
dnl Check for library functions
dnl --------------------------------------------------

AC_CHECK_LIB(pthread, pthread_mutex_lock, has_pthreads=yes)
if test -z "$has_pthreads"; then
  AC_MSG_WARN([                                                         ])
  AC_MSG_WARN([*********************************************************])
  AC_MSG_WARN([Postfish requires pthreads.  No pthreads, no build :-(   ])
  AC_MSG_WARN([*********************************************************])
  AC_MSG_ERROR([   bailing...                                            ])
fi	

AC_CHECK_LIB(ncurses, initscr, has_ncurses=yes)
if test -z "$has_ncurses"; then
  AC_MSG_WARN([                                                         ])
  AC_MSG_WARN([*********************************************************])
  AC_MSG_WARN([Postfish requires ncurses.  No ncurses, no build :-(     ])
  AC_MSG_WARN([*********************************************************])
  AC_MSG_ERROR([   bailing...                                            ])
fi	

AC_CHECK_LIB(m, cos, LIBS="-lm", LIBS="")

AC_CHECK_LIB(c, fseeko, has_fseeko="yes")
AC_CHECK_LIB(c, ftello, has_ftello="yes")

if test x"$has_fseeko$has_ftello" != "xyesyes" ; then
  AC_MSG_WARN([                                                         ])
  AC_MSG_WARN([*********************************************************])
  AC_MSG_WARN([Postfish requires the SysV-ish fseeko/ftello extention as])
  AC_MSG_WARN([the ANSI committee helpfully defined a useless 64 bit    ])
  AC_MSG_WARN([standard IO file interface.                              ])
  AC_MSG_WARN([*********************************************************])
  AC_MSG_ERROR([   bailing....                                           ])
fi

dnl --------------------------------------------------
dnl Do substitutions
dnl --------------------------------------------------

AC_MSG_CHECKING(for sizeof off_t)
AC_TRY_RUN([
#define _GNU_SOURCE
#define _LARGEFILE_SOURCE 
#define _LARGEFILE64_SOURCE
#define _FILE_OFFSET_BITS 64
#define _REENTRANT 1
#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
int main() {if(sizeof(off_t)<64)return 0;return 1;}
],
sizeof_off_t=">= 64 bits",
sizeof_off_t="< 64 bits",
sizeof_off_t="< 64 bits"
)
AC_MSG_RESULT($sizeof_off_t)

if test "$sizeof_off_t" = "< 64 bits" ; then
  AC_MSG_WARN([                                                         ])
  AC_MSG_WARN([*********************************************************])
  AC_MSG_WARN([No 64 bit stdio support in this libc.  File max size 2GB ])
  AC_MSG_WARN([*********************************************************])
  AC_MSG_WARN([                                                         ])
fi


LIBS="$LIBS"

AC_SUBST(LIBS)
AC_SUBST(DEBUG)
AC_SUBST(PROFILE)

AC_OUTPUT(Makefile)




