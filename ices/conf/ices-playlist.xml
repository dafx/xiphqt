<?xml version="1.0"?>
<ices>

	<background>0</background> <!-- run in background? (unimplemented) -->
	<logpath>/tmp</logpath> <!-- where logs, etc go. -->
	<logfile>ices.log</logfile>
	<loglevel>4</loglevel> <!-- 1=error,2=warn,3=info,4=debug -->

	<stream>
		<!-- metadata used for stream listing (not currently used) -->
		<metadata>
			<name>Example stream name</name>
			<genre>Example genre</genre>
			<description>A short description of your stream</description>
		</metadata>

		<!-- input module
			 This defines where the data (raw PCM, vorbis files, etc.) comes
			 from. The module used here is the playlist module - it has 
			 'submodules' for different types of playlist. The only one 
			 currently implemented is 'basic', which is a simple file-based
			 playlist
		-->
		<input>
			<module>playlist</module>
			<param name="type">basic</param><!-- Only 'basic' implemented -->
			<param name="file">playlist.txt</param> <!-- be sure this exists -->
			<param name="random">0</param> <!-- random play -->
			<param name="once">0</param> <!-- if set to 1 , plays once through,
			                                  then exits. -->
		</input>

		<!-- Stream instance
			 You may have one or more instances here. This allows you to 
			 send the same input data to one or more servers (or to different
			 mountpoints on the same server). Each of them can have different
			 parameters. This is primarily useful for a) relaying to multiple
			 independent servers, and b) encoding/reencoding to multiple
			 bitrates.
			 If one instance fails (for example, the associated server goes
			 down, etc), the others will continue to function correctly.
			 This example defines two instances as two mountpoints on the
			 same server.
		-->
		<instance>
			<!-- Server details:
				 You define hostname and port for the server here, along with
				 the source password and mountpoint. 
			-->
			<hostname>localhost</hostname>
			<port>8000</port>
			<password>hackme</password>
			<mount>/example1.ogg</mount>

			<!-- Reconnect parameters:
				 When something goes wrong (e.g. the server crashes, or the
				 network drops) and ices disconnects from the server, these
				 control how often it tries to reconnect, and how many times
				 it tries to reconnect. Delay is in seconds.
				 If you set reconnectattempts to -1, it will continue 
				 indefinately. Suggest setting reconnectdelay to a large value
				 if you do this.
			-->
			<reconnectdelay>2</reconnectdelay>
			<reconnectattempts>5</reconnectattempts> 

			<!-- maxqueuelength:
				 This describes how long the internal data queues may be. This
				 basically lets you control how much data gets buffered before
				 ices decides it can't send to the server fast enough, and 
				 either shuts down or flushes the queue (dropping the data)
				 and continues. 
				 For advanced users only.
			-->
			<maxqueuelength>80</maxqueuelength>

			<!-- Live encoding/reencoding:
				 Currrently, the parameters given here for encoding MUST
				 match the input data for channels and sample rate. That 
				 restriction will be relaxed in the future.
			-->
			<encode>  
				<bitrate>64000</bitrate> <!-- bps. e.g. 64000 for 64 kbps -->
				<samplerate>44100</samplerate>
				<channels>2</channels>
			</encode>
		</instance>

		<!-- Now, we define a 2nd stream instance.
			 Here, we only define the basic server parameters - everything
			 else takes the default values.
			 No reencoding is done.
		-->
		<instance>
			<hostname>localhost</hostname>
			<port>8000</port>
			<password>hackme</password>
			<mount>/example2.ogg</mount>
		    <!-- Stream saving. Save the outgoing stream to the specified file
    			 This is commented out since we don't want it by default -->
			<!--
            <savefile>streamdump.ogg</savefile>
             -->
		</instance>

	</stream>
</ices>
